export interface SpringConfig {
    fromValue: number;
    toValue: number;
    stiffness: number;
    damping: number;
    mass: number;
    initialVelocity: number;
    allowsOverdamping: boolean;
    overshootClamping: boolean;
    restVelocityThreshold: number;
    restDisplacementThreshold: number;
}
export declare type PartialSpringConfig = Partial<SpringConfig>;
export declare type SpringListenerFn = (spring: Spring) => void;
export interface SpringListener {
    onUpdate?: SpringListenerFn;
    onStart?: SpringListenerFn;
    onStop?: SpringListenerFn;
}
/**
 * Implements a spring physics simulation based on the equations behind
 * damped harmonic oscillators (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).
 */
export declare class Spring {
    static MAX_DELTA_TIME_MS: number;
    _listeners: SpringListener[];
    private _config;
    private _currentAnimationStep;
    private _currentTime;
    private _springTime;
    private _currentValue;
    private _currentVelocity;
    private _isAnimating;
    private _oscillationVelocityPairs;
    constructor(config?: PartialSpringConfig);
    /**
     * If `fromValue` differs from `toValue`, or `initialVelocity` is non-zero,
     * start the simulation and call the `onStart` listeners.
     */
    start(): this;
    /**
     * If a simulation is in progress, stop it and call the `onStop` listeners.
     */
    stop(): this;
    /**
     * The spring's current position.
     */
    readonly currentValue: number;
    /**
     * The spring's current velocity in units / ms.
     */
    readonly currentVelocity: number;
    /**
     * If the spring has reached its `toValue`, or if its velocity is below the
     * `restVelocityThreshold`, it is considered at rest. If `stop()` is called
     * during a simulation, both `isAnimating` and `isAtRest` will be false.
     */
    readonly isAtRest: boolean;
    /**
     * Whether or not the spring is currently emitting values.
     *
     * Note: this is distinct from whether or not it is at rest.
     * See also `isAtRest`.
     */
    readonly isAnimating: boolean;
    /**
     * Updates the spring config with the given values.  Values not explicitly
     * supplied will be reused from the existing config.
     */
    updateConfig(updatedConfig: PartialSpringConfig): this;
    /**
     * The provided callback will be invoked when the simulation begins.
     */
    onStart(listener: SpringListenerFn): this;
    /**
     * The provided callback will be invoked on each frame while the simulation is
     * running.
     */
    onUpdate(listener: SpringListenerFn): this;
    /**
     * The provided callback will be invoked when the simulation ends.
     */
    onStop(listener: SpringListenerFn): this;
    /**
     * Remove a single listener from this spring.
     */
    removeListener(listenerFn: SpringListenerFn): this;
    /**
     * Removes all listeners from this spring.
     */
    removeAllListeners(): this;
    private _reset();
    private _notifyListeners(eventName);
    /**
     * `_step` is the main loop.  While the animation is running, it updates the
     * current state once per frame, and schedules the next frame if the spring is
     * not yet at rest.
     */
    private _step(timestamp);
    private _advanceSpringToTime(timestamp, shouldNotifyListeners?);
    private _isSpringOvershooting();
    private _isSpringAtRest();
}
