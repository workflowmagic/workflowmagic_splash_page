{"version":3,"file":"wobble.es.min.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["/**\n *  @license\n *  Copyright 2017 Adam Miskiewicz\n *\n *  Use of this source code is governed by a MIT-style license that can be found\n *  in the LICENSE file or at https://opensource.org/licenses/MIT.\n */\n\nexport function invariant(condition: boolean, message: string): void {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nexport function withDefault<X>(maybeValue: X | undefined, defaultValue: X): X {\n  return typeof maybeValue !== \"undefined\" && maybeValue !== null\n    ? (maybeValue as X)\n    : defaultValue;\n}\n","/**\n *  @license\n *  Copyright 2017 Adam Miskiewicz\n *\n *  Use of this source code is governed by a MIT-style license that can be found\n *  in the LICENSE file or at https://opensource.org/licenses/MIT.\n */\n\nimport { invariant, withDefault } from \"./utils\";\n\nexport interface SpringConfig {\n  fromValue: number; // Starting value of the animation.\n  toValue: number; // Ending value of the animation.\n  stiffness: number; // The spring stiffness coefficient.\n  damping: number; // Defines how the springâ€™s motion should be damped due to the forces of friction.\n  mass: number; // The mass of the object attached to the end of the spring.\n  initialVelocity: number; // The initial velocity (in units/ms) of the object attached to the spring.\n  allowsOverdamping: boolean; // Whether or not the spring allows \"overdamping\" (a damping ratio > 1). Defaults to false.\n  overshootClamping: boolean; // False when overshooting is allowed, true when it is not. Defaults to false.\n  restVelocityThreshold: number; // When spring's velocity is below `restVelocityThreshold`, it is at rest. Defaults to .001.\n  restDisplacementThreshold: number; // When the spring's displacement (current value) is below `restDisplacementThreshold`, it is at rest. Defaults to .001.\n}\n\nexport type PartialSpringConfig = Partial<SpringConfig>;\n\nexport type SpringListenerFn = (spring: Spring) => void;\nexport interface SpringListener {\n  onUpdate?: SpringListenerFn;\n  onStart?: SpringListenerFn;\n  onStop?: SpringListenerFn;\n}\n\n/**\n * Implements a spring physics simulation based on the equations behind\n * damped harmonic oscillators (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n */\nexport class Spring {\n  static MAX_DELTA_TIME_MS = 1 / 60 * 1000 * 4; // advance 4 frames at max\n\n  _listeners: SpringListener[] = [];\n\n  private _config: SpringConfig;\n  private _currentAnimationStep: number = 0; // current requestAnimationFrame\n\n  private _currentTime: number = 0; // Current timestamp of animation in ms (real time)\n  private _springTime: number = 0; // Current time along the spring curve in ms (zero-based)\n\n  private _currentValue: number = 0; // the current value of the spring\n  private _currentVelocity: number = 0; // the current velocity of the spring\n  private _isAnimating: boolean = false;\n\n  private _oscillationVelocityPairs = [];\n\n  constructor(config: PartialSpringConfig = {}) {\n    this._config = {\n      fromValue: withDefault(config.fromValue, 0),\n      toValue: withDefault(config.toValue, 1),\n      stiffness: withDefault(config.stiffness, 100),\n      damping: withDefault(config.damping, 10),\n      mass: withDefault(config.mass, 1),\n      initialVelocity: withDefault(config.initialVelocity, 0),\n      overshootClamping: withDefault(config.overshootClamping, false),\n      allowsOverdamping: withDefault(config.allowsOverdamping, false),\n      restVelocityThreshold: withDefault(config.restVelocityThreshold, 0.001),\n      restDisplacementThreshold: withDefault(\n        config.restDisplacementThreshold,\n        0.001\n      )\n    };\n    this._currentValue = this._config.fromValue;\n    this._currentVelocity = this._config.initialVelocity;\n  }\n\n  /**\n   * If `fromValue` differs from `toValue`, or `initialVelocity` is non-zero,\n   * start the simulation and call the `onStart` listeners.\n   */\n  start(): this {\n    const { fromValue, toValue, initialVelocity } = this._config;\n\n    if (fromValue !== toValue || initialVelocity !== 0) {\n      this._reset();\n      this._isAnimating = true;\n\n      if (!this._currentAnimationStep) {\n        this._notifyListeners(\"onStart\");\n        this._currentAnimationStep = requestAnimationFrame((t: number) => {\n          this._step(Date.now());\n        });\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * If a simulation is in progress, stop it and call the `onStop` listeners.\n   */\n  stop(): this {\n    if (!this._isAnimating) {\n      return this;\n    }\n\n    this._isAnimating = false;\n    this._notifyListeners(\"onStop\");\n\n    if (this._currentAnimationStep) {\n      cancelAnimationFrame(this._currentAnimationStep);\n      this._currentAnimationStep = 0;\n    }\n\n    return this;\n  }\n\n  /**\n   * The spring's current position.\n   */\n  get currentValue(): number {\n    return this._currentValue;\n  }\n\n  /**\n   * The spring's current velocity in units / ms.\n   */\n  get currentVelocity(): number {\n    return this._currentVelocity; // give velocity in units/ms;\n  }\n\n  /**\n   * If the spring has reached its `toValue`, or if its velocity is below the\n   * `restVelocityThreshold`, it is considered at rest. If `stop()` is called\n   * during a simulation, both `isAnimating` and `isAtRest` will be false.\n   */\n  get isAtRest(): boolean {\n    return this._isSpringAtRest();\n  }\n\n  /**\n   * Whether or not the spring is currently emitting values.\n   *\n   * Note: this is distinct from whether or not it is at rest.\n   * See also `isAtRest`.\n   */\n  get isAnimating(): boolean {\n    return this._isAnimating;\n  }\n\n  /**\n   * Updates the spring config with the given values.  Values not explicitly\n   * supplied will be reused from the existing config.\n   */\n  updateConfig(updatedConfig: PartialSpringConfig): this {\n    // When we update the spring config, we reset the simulation to ensure the\n    // spring always moves the full distance between `fromValue` and `toValue`.\n    // To ensure that the simulation behaves correctly if those values aren't\n    // being changed in `updatedConfig`, we run the simulation with `_step()`\n    // and default `fromValue` and `initialVelocity` to their current values.\n\n    this._advanceSpringToTime(Date.now());\n\n    const baseConfig = {\n      fromValue: this._currentValue,\n      initialVelocity: this._currentVelocity\n    };\n\n    this._config = {\n      ...this._config,\n      ...baseConfig,\n      ...updatedConfig\n    };\n\n    this._reset();\n\n    return this;\n  }\n\n  /**\n   * The provided callback will be invoked when the simulation begins.\n   */\n  onStart(listener: SpringListenerFn): this {\n    this._listeners.push({ onStart: listener });\n    return this;\n  }\n\n  /**\n   * The provided callback will be invoked on each frame while the simulation is\n   * running.\n   */\n  onUpdate(listener: SpringListenerFn): this {\n    this._listeners.push({ onUpdate: listener });\n    return this;\n  }\n\n  /**\n   * The provided callback will be invoked when the simulation ends.\n   */\n  onStop(listener: SpringListenerFn): this {\n    this._listeners.push({ onStop: listener });\n    return this;\n  }\n\n  /**\n   * Remove a single listener from this spring.\n   */\n  removeListener(listenerFn: SpringListenerFn): this {\n    this._listeners = this._listeners.reduce(\n      (result, listener) => {\n        const foundListenerFn =\n          Object.values(listener).indexOf(listenerFn) !== -1;\n        if (!foundListenerFn) {\n          result.push(listener);\n        }\n        return result;\n      },\n      [] as SpringListener[]\n    );\n    return this;\n  }\n\n  /**\n   * Removes all listeners from this spring.\n   */\n  removeAllListeners(): this {\n    this._listeners = [];\n    return this;\n  }\n\n  private _reset() {\n    this._currentTime = Date.now();\n    this._springTime = 0.0;\n    this._currentValue = this._config.fromValue;\n    this._currentVelocity = this._config.initialVelocity;\n  }\n\n  private _notifyListeners(eventName: keyof SpringListener) {\n    this._listeners.forEach((listener: Partial<SpringListener>) => {\n      const maybeListenerFn = listener[eventName];\n      if (typeof maybeListenerFn === \"function\") {\n        maybeListenerFn(this);\n      }\n    });\n  }\n\n  /**\n   * `_step` is the main loop.  While the animation is running, it updates the\n   * current state once per frame, and schedules the next frame if the spring is\n   * not yet at rest.\n   */\n  private _step(timestamp: number) {\n    this._advanceSpringToTime(timestamp, true);\n\n    // check `_isAnimating`, in case `stop()` got called during\n    // `_advanceSpringToTime()`\n    if (this._isAnimating) {\n      this._currentAnimationStep = requestAnimationFrame((t: number) =>\n        this._step(Date.now())\n      );\n    }\n  }\n\n  private _advanceSpringToTime(\n    timestamp: number,\n    shouldNotifyListeners: boolean = false\n  ) {\n    // `_advanceSpringToTime` updates `_currentTime` and triggers the listeners.\n    // Because of these side effects, it's only safe to call when an animation\n    // is already in-progress.\n    if (!this._isAnimating) {\n      return;\n    }\n\n    let deltaTime = timestamp - this._currentTime;\n\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at slower speed than jumping to the end.\n    if (deltaTime > Spring.MAX_DELTA_TIME_MS) {\n      deltaTime = Spring.MAX_DELTA_TIME_MS;\n    }\n    this._springTime += deltaTime;\n\n    const c = this._config.damping;\n    const m = this._config.mass;\n    const k = this._config.stiffness;\n    const fromValue = this._config.fromValue;\n    const toValue = this._config.toValue;\n    const v0 = -this._config.initialVelocity;\n\n    invariant(m > 0, \"Mass value must be greater than 0\");\n    invariant(k > 0, \"Stiffness value must be greater than 0\");\n    invariant(c > 0, \"Damping value must be greater than 0\");\n\n    let zeta = c / (2 * Math.sqrt(k * m)); // damping ratio (dimensionless)\n    const omega0 = Math.sqrt(k / m) / 1000; // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const omega2 = omega0 * Math.sqrt(zeta * zeta - 1.0); // frequency of damped oscillation\n    const x0 = toValue - fromValue; // initial displacement of the spring at t = 0\n\n    if (zeta > 1 && !this._config.allowsOverdamping) {\n      zeta = 1;\n    }\n\n    let oscillation = 0.0;\n    let velocity = 0.0;\n    const t = this._springTime;\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      oscillation =\n        toValue -\n        envelope *\n          ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) +\n            x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 +\n            x0 * Math.cos(omega1 * t)) -\n        envelope *\n          (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * t));\n    } else if (zeta === 1) {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * t);\n      oscillation = toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity =\n        envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    } else {\n      // Overdamped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      oscillation =\n        toValue -\n        envelope *\n          ((v0 + zeta * omega0 * x0) * Math.sinh(omega2 * t) +\n            omega2 * x0 * Math.cosh(omega2 * t)) /\n          omega2;\n      velocity =\n        envelope *\n          zeta *\n          omega0 *\n          (Math.sinh(omega2 * t) * (v0 + zeta * omega0 * x0) +\n            x0 * omega2 * Math.cosh(omega2 * t)) /\n          omega2 -\n        envelope *\n          (omega2 * Math.cosh(omega2 * t) * (v0 + zeta * omega0 * x0) +\n            omega2 * omega2 * x0 * Math.sinh(omega2 * t)) /\n          omega2;\n    }\n\n    this._currentTime = timestamp;\n    this._currentValue = oscillation;\n    this._currentVelocity = velocity;\n\n    if (!shouldNotifyListeners) {\n      return;\n    }\n\n    this._notifyListeners(\"onUpdate\");\n    if (!this._isAnimating) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // If the Spring is overshooting (when overshoot clamping is on), or if the\n    // spring is at rest (based on the thresholds set in the config), stop the\n    // animation.\n    if (this._isSpringOvershooting() || this._isSpringAtRest()) {\n      if (k !== 0) {\n        // Ensure that we end up with a round value\n        this._currentValue = toValue;\n        this._currentVelocity = 0;\n        this._notifyListeners(\"onUpdate\");\n      }\n\n      this.stop();\n      return;\n    }\n  }\n\n  private _isSpringOvershooting() {\n    const { stiffness, fromValue, toValue, overshootClamping } = this._config;\n    let isOvershooting = false;\n    if (overshootClamping && stiffness !== 0) {\n      if (fromValue < toValue) {\n        isOvershooting = this._currentValue > toValue;\n      } else {\n        isOvershooting = this._currentValue < toValue;\n      }\n    }\n    return isOvershooting;\n  }\n\n  private _isSpringAtRest() {\n    const {\n      stiffness,\n      toValue,\n      restDisplacementThreshold,\n      restVelocityThreshold\n    } = this._config;\n\n    const isNoVelocity =\n      Math.abs(this._currentVelocity) <= restVelocityThreshold;\n    const isNoDisplacement =\n      stiffness !== 0 &&\n      Math.abs(toValue - this._currentValue) <= restDisplacementThreshold;\n    return isNoDisplacement && isNoVelocity;\n  }\n}\n"],"names":["condition","message","Error","maybeValue","defaultValue","[object Object]","config","this","_config","fromValue","withDefault","toValue","stiffness","damping","mass","initialVelocity","overshootClamping","allowsOverdamping","restVelocityThreshold","restDisplacementThreshold","_currentValue","_currentVelocity","_reset","_isAnimating","_currentAnimationStep","_notifyListeners","requestAnimationFrame","t","_step","Date","now","cancelAnimationFrame","currentValue","currentVelocity","isAtRest","_isSpringAtRest","isAnimating","updatedConfig","_advanceSpringToTime","baseConfig","listener","_listeners","push","onStart","onUpdate","onStop","listenerFn","reduce","result","Object","values","indexOf","_currentTime","_springTime","eventName","forEach","maybeListenerFn","timestamp","shouldNotifyListeners","deltaTime","Spring","MAX_DELTA_TIME_MS","c","m","k","v0","invariant","zeta","Math","sqrt","omega0","omega1","omega2","x0","oscillation","velocity","envelope","exp","sin","cos","sinh","cosh","_isSpringOvershooting","stop","isOvershooting","isNoVelocity","abs"],"mappings":"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"}