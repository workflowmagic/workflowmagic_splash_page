{"version":3,"file":"wobble.es.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["/**\n *  @license\n *  Copyright 2017 Adam Miskiewicz\n *\n *  Use of this source code is governed by a MIT-style license that can be found\n *  in the LICENSE file or at https://opensource.org/licenses/MIT.\n */\n\nexport function invariant(condition: boolean, message: string): void {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nexport function withDefault<X>(maybeValue: X | undefined, defaultValue: X): X {\n  return typeof maybeValue !== \"undefined\" && maybeValue !== null\n    ? (maybeValue as X)\n    : defaultValue;\n}\n","/**\n *  @license\n *  Copyright 2017 Adam Miskiewicz\n *\n *  Use of this source code is governed by a MIT-style license that can be found\n *  in the LICENSE file or at https://opensource.org/licenses/MIT.\n */\n\nimport { invariant, withDefault } from \"./utils\";\n\nexport interface SpringConfig {\n  fromValue: number; // Starting value of the animation.\n  toValue: number; // Ending value of the animation.\n  stiffness: number; // The spring stiffness coefficient.\n  damping: number; // Defines how the springâ€™s motion should be damped due to the forces of friction.\n  mass: number; // The mass of the object attached to the end of the spring.\n  initialVelocity: number; // The initial velocity (in units/ms) of the object attached to the spring.\n  allowsOverdamping: boolean; // Whether or not the spring allows \"overdamping\" (a damping ratio > 1). Defaults to false.\n  overshootClamping: boolean; // False when overshooting is allowed, true when it is not. Defaults to false.\n  restVelocityThreshold: number; // When spring's velocity is below `restVelocityThreshold`, it is at rest. Defaults to .001.\n  restDisplacementThreshold: number; // When the spring's displacement (current value) is below `restDisplacementThreshold`, it is at rest. Defaults to .001.\n}\n\nexport type PartialSpringConfig = Partial<SpringConfig>;\n\nexport type SpringListenerFn = (spring: Spring) => void;\nexport interface SpringListener {\n  onUpdate?: SpringListenerFn;\n  onStart?: SpringListenerFn;\n  onStop?: SpringListenerFn;\n}\n\n/**\n * Implements a spring physics simulation based on the equations behind\n * damped harmonic oscillators (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n */\nexport class Spring {\n  static MAX_DELTA_TIME_MS = 1 / 60 * 1000 * 4; // advance 4 frames at max\n\n  _listeners: SpringListener[] = [];\n\n  private _config: SpringConfig;\n  private _currentAnimationStep: number = 0; // current requestAnimationFrame\n\n  private _currentTime: number = 0; // Current timestamp of animation in ms (real time)\n  private _springTime: number = 0; // Current time along the spring curve in ms (zero-based)\n\n  private _currentValue: number = 0; // the current value of the spring\n  private _currentVelocity: number = 0; // the current velocity of the spring\n  private _isAnimating: boolean = false;\n\n  private _oscillationVelocityPairs = [];\n\n  constructor(config: PartialSpringConfig = {}) {\n    this._config = {\n      fromValue: withDefault(config.fromValue, 0),\n      toValue: withDefault(config.toValue, 1),\n      stiffness: withDefault(config.stiffness, 100),\n      damping: withDefault(config.damping, 10),\n      mass: withDefault(config.mass, 1),\n      initialVelocity: withDefault(config.initialVelocity, 0),\n      overshootClamping: withDefault(config.overshootClamping, false),\n      allowsOverdamping: withDefault(config.allowsOverdamping, false),\n      restVelocityThreshold: withDefault(config.restVelocityThreshold, 0.001),\n      restDisplacementThreshold: withDefault(\n        config.restDisplacementThreshold,\n        0.001\n      )\n    };\n    this._currentValue = this._config.fromValue;\n    this._currentVelocity = this._config.initialVelocity;\n  }\n\n  /**\n   * If `fromValue` differs from `toValue`, or `initialVelocity` is non-zero,\n   * start the simulation and call the `onStart` listeners.\n   */\n  start(): this {\n    const { fromValue, toValue, initialVelocity } = this._config;\n\n    if (fromValue !== toValue || initialVelocity !== 0) {\n      this._reset();\n      this._isAnimating = true;\n\n      if (!this._currentAnimationStep) {\n        this._notifyListeners(\"onStart\");\n        this._currentAnimationStep = requestAnimationFrame((t: number) => {\n          this._step(Date.now());\n        });\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * If a simulation is in progress, stop it and call the `onStop` listeners.\n   */\n  stop(): this {\n    if (!this._isAnimating) {\n      return this;\n    }\n\n    this._isAnimating = false;\n    this._notifyListeners(\"onStop\");\n\n    if (this._currentAnimationStep) {\n      cancelAnimationFrame(this._currentAnimationStep);\n      this._currentAnimationStep = 0;\n    }\n\n    return this;\n  }\n\n  /**\n   * The spring's current position.\n   */\n  get currentValue(): number {\n    return this._currentValue;\n  }\n\n  /**\n   * The spring's current velocity in units / ms.\n   */\n  get currentVelocity(): number {\n    return this._currentVelocity; // give velocity in units/ms;\n  }\n\n  /**\n   * If the spring has reached its `toValue`, or if its velocity is below the\n   * `restVelocityThreshold`, it is considered at rest. If `stop()` is called\n   * during a simulation, both `isAnimating` and `isAtRest` will be false.\n   */\n  get isAtRest(): boolean {\n    return this._isSpringAtRest();\n  }\n\n  /**\n   * Whether or not the spring is currently emitting values.\n   *\n   * Note: this is distinct from whether or not it is at rest.\n   * See also `isAtRest`.\n   */\n  get isAnimating(): boolean {\n    return this._isAnimating;\n  }\n\n  /**\n   * Updates the spring config with the given values.  Values not explicitly\n   * supplied will be reused from the existing config.\n   */\n  updateConfig(updatedConfig: PartialSpringConfig): this {\n    // When we update the spring config, we reset the simulation to ensure the\n    // spring always moves the full distance between `fromValue` and `toValue`.\n    // To ensure that the simulation behaves correctly if those values aren't\n    // being changed in `updatedConfig`, we run the simulation with `_step()`\n    // and default `fromValue` and `initialVelocity` to their current values.\n\n    this._advanceSpringToTime(Date.now());\n\n    const baseConfig = {\n      fromValue: this._currentValue,\n      initialVelocity: this._currentVelocity\n    };\n\n    this._config = {\n      ...this._config,\n      ...baseConfig,\n      ...updatedConfig\n    };\n\n    this._reset();\n\n    return this;\n  }\n\n  /**\n   * The provided callback will be invoked when the simulation begins.\n   */\n  onStart(listener: SpringListenerFn): this {\n    this._listeners.push({ onStart: listener });\n    return this;\n  }\n\n  /**\n   * The provided callback will be invoked on each frame while the simulation is\n   * running.\n   */\n  onUpdate(listener: SpringListenerFn): this {\n    this._listeners.push({ onUpdate: listener });\n    return this;\n  }\n\n  /**\n   * The provided callback will be invoked when the simulation ends.\n   */\n  onStop(listener: SpringListenerFn): this {\n    this._listeners.push({ onStop: listener });\n    return this;\n  }\n\n  /**\n   * Remove a single listener from this spring.\n   */\n  removeListener(listenerFn: SpringListenerFn): this {\n    this._listeners = this._listeners.reduce(\n      (result, listener) => {\n        const foundListenerFn =\n          Object.values(listener).indexOf(listenerFn) !== -1;\n        if (!foundListenerFn) {\n          result.push(listener);\n        }\n        return result;\n      },\n      [] as SpringListener[]\n    );\n    return this;\n  }\n\n  /**\n   * Removes all listeners from this spring.\n   */\n  removeAllListeners(): this {\n    this._listeners = [];\n    return this;\n  }\n\n  private _reset() {\n    this._currentTime = Date.now();\n    this._springTime = 0.0;\n    this._currentValue = this._config.fromValue;\n    this._currentVelocity = this._config.initialVelocity;\n  }\n\n  private _notifyListeners(eventName: keyof SpringListener) {\n    this._listeners.forEach((listener: Partial<SpringListener>) => {\n      const maybeListenerFn = listener[eventName];\n      if (typeof maybeListenerFn === \"function\") {\n        maybeListenerFn(this);\n      }\n    });\n  }\n\n  /**\n   * `_step` is the main loop.  While the animation is running, it updates the\n   * current state once per frame, and schedules the next frame if the spring is\n   * not yet at rest.\n   */\n  private _step(timestamp: number) {\n    this._advanceSpringToTime(timestamp, true);\n\n    // check `_isAnimating`, in case `stop()` got called during\n    // `_advanceSpringToTime()`\n    if (this._isAnimating) {\n      this._currentAnimationStep = requestAnimationFrame((t: number) =>\n        this._step(Date.now())\n      );\n    }\n  }\n\n  private _advanceSpringToTime(\n    timestamp: number,\n    shouldNotifyListeners: boolean = false\n  ) {\n    // `_advanceSpringToTime` updates `_currentTime` and triggers the listeners.\n    // Because of these side effects, it's only safe to call when an animation\n    // is already in-progress.\n    if (!this._isAnimating) {\n      return;\n    }\n\n    let deltaTime = timestamp - this._currentTime;\n\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at slower speed than jumping to the end.\n    if (deltaTime > Spring.MAX_DELTA_TIME_MS) {\n      deltaTime = Spring.MAX_DELTA_TIME_MS;\n    }\n    this._springTime += deltaTime;\n\n    const c = this._config.damping;\n    const m = this._config.mass;\n    const k = this._config.stiffness;\n    const fromValue = this._config.fromValue;\n    const toValue = this._config.toValue;\n    const v0 = -this._config.initialVelocity;\n\n    invariant(m > 0, \"Mass value must be greater than 0\");\n    invariant(k > 0, \"Stiffness value must be greater than 0\");\n    invariant(c > 0, \"Damping value must be greater than 0\");\n\n    let zeta = c / (2 * Math.sqrt(k * m)); // damping ratio (dimensionless)\n    const omega0 = Math.sqrt(k / m) / 1000; // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const omega2 = omega0 * Math.sqrt(zeta * zeta - 1.0); // frequency of damped oscillation\n    const x0 = toValue - fromValue; // initial displacement of the spring at t = 0\n\n    if (zeta > 1 && !this._config.allowsOverdamping) {\n      zeta = 1;\n    }\n\n    let oscillation = 0.0;\n    let velocity = 0.0;\n    const t = this._springTime;\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      oscillation =\n        toValue -\n        envelope *\n          ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) +\n            x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 +\n            x0 * Math.cos(omega1 * t)) -\n        envelope *\n          (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * t));\n    } else if (zeta === 1) {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * t);\n      oscillation = toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity =\n        envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    } else {\n      // Overdamped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      oscillation =\n        toValue -\n        envelope *\n          ((v0 + zeta * omega0 * x0) * Math.sinh(omega2 * t) +\n            omega2 * x0 * Math.cosh(omega2 * t)) /\n          omega2;\n      velocity =\n        envelope *\n          zeta *\n          omega0 *\n          (Math.sinh(omega2 * t) * (v0 + zeta * omega0 * x0) +\n            x0 * omega2 * Math.cosh(omega2 * t)) /\n          omega2 -\n        envelope *\n          (omega2 * Math.cosh(omega2 * t) * (v0 + zeta * omega0 * x0) +\n            omega2 * omega2 * x0 * Math.sinh(omega2 * t)) /\n          omega2;\n    }\n\n    this._currentTime = timestamp;\n    this._currentValue = oscillation;\n    this._currentVelocity = velocity;\n\n    if (!shouldNotifyListeners) {\n      return;\n    }\n\n    this._notifyListeners(\"onUpdate\");\n    if (!this._isAnimating) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // If the Spring is overshooting (when overshoot clamping is on), or if the\n    // spring is at rest (based on the thresholds set in the config), stop the\n    // animation.\n    if (this._isSpringOvershooting() || this._isSpringAtRest()) {\n      if (k !== 0) {\n        // Ensure that we end up with a round value\n        this._currentValue = toValue;\n        this._currentVelocity = 0;\n        this._notifyListeners(\"onUpdate\");\n      }\n\n      this.stop();\n      return;\n    }\n  }\n\n  private _isSpringOvershooting() {\n    const { stiffness, fromValue, toValue, overshootClamping } = this._config;\n    let isOvershooting = false;\n    if (overshootClamping && stiffness !== 0) {\n      if (fromValue < toValue) {\n        isOvershooting = this._currentValue > toValue;\n      } else {\n        isOvershooting = this._currentValue < toValue;\n      }\n    }\n    return isOvershooting;\n  }\n\n  private _isSpringAtRest() {\n    const {\n      stiffness,\n      toValue,\n      restDisplacementThreshold,\n      restVelocityThreshold\n    } = this._config;\n\n    const isNoVelocity =\n      Math.abs(this._currentVelocity) <= restVelocityThreshold;\n    const isNoDisplacement =\n      stiffness !== 0 &&\n      Math.abs(toValue - this._currentValue) <= restDisplacementThreshold;\n    return isNoDisplacement && isNoVelocity;\n  }\n}\n"],"names":[],"mappings":"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"}