{"ast":null,"code":"import _regeneratorRuntime from \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Dexie from 'dexie';\nimport 'dexie-observable';\nvar indexedDB = new Dexie(\"WorkflowMagicUserDB\");\nindexedDB.version(1).stores({\n  workflows: \"++id,client_id,content,title\",\n  clients: \"++id,name\",\n  // contacts:\"++id,client_id,content,title\",\n  contacts: \"++id,client_id,full_name,first_name,last_name,email,phone_number,additional_information\",\n  calendar_events: \"++id,start,end,title,description,client_name,client_id,group_id\",\n  calendar_event_group_id: \"++id, title, client_name, client_id\",\n  user: \"user_id\"\n}); //___________________________________________________BEGIN check if ANY data exists\n\nexport function databaseContainsData() {\n  return _databaseContainsData.apply(this, arguments);\n} //___________________________________________________END check if any data exists\n//___________________________________________________BEGIN Client methods\n\nfunction _databaseContainsData() {\n  _databaseContainsData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var clients, clientsExist, workflows, workflowsExist, contacts, contactsExist, calendarEvents, calendarEventsExist;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return indexedDB.clients.toArray();\n\n          case 2:\n            clients = _context.sent;\n            clientsExist = clients[0];\n            _context.next = 6;\n            return indexedDB.workflows.toArray();\n\n          case 6:\n            workflows = _context.sent;\n            workflowsExist = workflows[0];\n            _context.next = 10;\n            return indexedDB.contacts.toArray();\n\n          case 10:\n            contacts = _context.sent;\n            contactsExist = contacts[0];\n            _context.next = 14;\n            return indexedDB.calendar_events.toArray();\n\n          case 14:\n            calendarEvents = _context.sent;\n            calendarEventsExist = calendarEvents[0];\n\n            if (!(clientsExist || workflowsExist || contactsExist || calendarEventsExist)) {\n              _context.next = 21;\n              break;\n            }\n\n            console.log(\"Yes the clients exist\");\n            return _context.abrupt(\"return\", true);\n\n          case 21:\n            console.log(\"No clients exist\");\n            return _context.abrupt(\"return\", false);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _databaseContainsData.apply(this, arguments);\n}\n\nexport function checkIfClientsExist() {\n  return _checkIfClientsExist.apply(this, arguments);\n}\n\nfunction _checkIfClientsExist() {\n  _checkIfClientsExist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var result, clientsExist;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return indexedDB.clients.toArray();\n\n          case 2:\n            result = _context2.sent;\n            clientsExist = result[0];\n\n            if (!clientsExist) {\n              _context2.next = 9;\n              break;\n            }\n\n            console.log(\"Yes the clients exist\");\n            return _context2.abrupt(\"return\", true);\n\n          case 9:\n            console.log(\"No clients exist\");\n            return _context2.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _checkIfClientsExist.apply(this, arguments);\n}\n\nexport function createClient(_x) {\n  return _createClient.apply(this, arguments);\n}\n\nfunction _createClient() {\n  _createClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return indexedDB.clients.add({\n              name: name\n            });\n\n          case 2:\n            result = _context3.sent;\n            return _context3.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _createClient.apply(this, arguments);\n}\n\nexport function getAllClients() {\n  return _getAllClients.apply(this, arguments);\n}\n\nfunction _getAllClients() {\n  _getAllClients = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return indexedDB.clients.toArray();\n\n          case 2:\n            result = _context4.sent;\n            return _context4.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getAllClients.apply(this, arguments);\n}\n\nexport function deleteClient(_x2) {\n  return _deleteClient.apply(this, arguments);\n}\n\nfunction _deleteClient() {\n  _deleteClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            result = indexedDB.clients.where(\"id\").equals(id).delete();\n            return _context5.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _deleteClient.apply(this, arguments);\n}\n\nexport function updateClient(_x3, _x4) {\n  return _updateClient.apply(this, arguments);\n}\n\nfunction _updateClient() {\n  _updateClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id, name) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            result = indexedDB.clients.update(id, {\n              name: name\n            });\n            return _context6.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _updateClient.apply(this, arguments);\n}\n\nexport function getClientById(_x5) {\n  return _getClientById.apply(this, arguments);\n} //______________________________________________________END Client methods\n//___________________________________________________BEGIN Workflow methods\n// @Does not check based on client !\n\nfunction _getClientById() {\n  _getClientById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            result = indexedDB.clients.get(id);\n            return _context7.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getClientById.apply(this, arguments);\n}\n\nexport function checkIfWorkflowsExist() {\n  return _checkIfWorkflowsExist.apply(this, arguments);\n}\n\nfunction _checkIfWorkflowsExist() {\n  _checkIfWorkflowsExist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n    var result, workflowsExist;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return indexedDB.workflows.toArray();\n\n          case 2:\n            result = _context8.sent;\n            workflowsExist = result[0];\n\n            if (!workflowsExist) {\n              _context8.next = 9;\n              break;\n            }\n\n            console.log(\"Yes workflows exist\");\n            return _context8.abrupt(\"return\", true);\n\n          case 9:\n            console.log(\"No workflows exist\");\n            return _context8.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _checkIfWorkflowsExist.apply(this, arguments);\n}\n\nexport function checkIfWorkflowsOfClientExist(_x6) {\n  return _checkIfWorkflowsOfClientExist.apply(this, arguments);\n}\n\nfunction _checkIfWorkflowsOfClientExist() {\n  _checkIfWorkflowsOfClientExist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(clientID) {\n    var allWorkflows, correctWorkflows;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return indexedDB.workflows.toArray();\n\n          case 2:\n            allWorkflows = _context9.sent;\n            _context9.next = 5;\n            return allWorkflows.filter(function (val) {\n              return val.client_id === clientID;\n            });\n\n          case 5:\n            correctWorkflows = _context9.sent;\n\n            if (!correctWorkflows[0]) {\n              _context9.next = 10;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", true);\n\n          case 10:\n            return _context9.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _checkIfWorkflowsOfClientExist.apply(this, arguments);\n}\n\nexport function createWorkflow(_x7, _x8, _x9) {\n  return _createWorkflow.apply(this, arguments);\n}\n\nfunction _createWorkflow() {\n  _createWorkflow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(clientID, title, content) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return indexedDB.workflows.add({\n              title: title,\n              content: content,\n              client_id: clientID\n            });\n\n          case 2:\n            result = _context10.sent;\n            return _context10.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _createWorkflow.apply(this, arguments);\n}\n\nexport function deleteWorkflow(_x10) {\n  return _deleteWorkflow.apply(this, arguments);\n}\n\nfunction _deleteWorkflow() {\n  _deleteWorkflow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            result = indexedDB.workflows.where(\"id\").equals(id).delete();\n            return _context11.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _deleteWorkflow.apply(this, arguments);\n}\n\nexport function getClientWorkflows(_x11) {\n  return _getClientWorkflows.apply(this, arguments);\n}\n\nfunction _getClientWorkflows() {\n  _getClientWorkflows = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(clientID) {\n    var allWorkflows, correctWorkflows;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.next = 2;\n            return indexedDB.workflows.toArray();\n\n          case 2:\n            allWorkflows = _context12.sent;\n            _context12.next = 5;\n            return allWorkflows.filter(function (val) {\n              return val.client_id === clientID;\n            });\n\n          case 5:\n            correctWorkflows = _context12.sent;\n            return _context12.abrupt(\"return\", correctWorkflows);\n\n          case 7:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _getClientWorkflows.apply(this, arguments);\n}\n\nexport function deleteClientWorkflows(_x12) {\n  return _deleteClientWorkflows.apply(this, arguments);\n}\n\nfunction _deleteClientWorkflows() {\n  _deleteClientWorkflows = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(clientId) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            result = indexedDB.workflows.where(\"client_id\").equals(clientId).delete();\n            return _context13.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _deleteClientWorkflows.apply(this, arguments);\n}\n\nexport function updateWorkflow(_x13, _x14, _x15) {\n  return _updateWorkflow.apply(this, arguments);\n} //___________________________________________________END Workflow methods\n//___________________________________________________BEGIN Contacts methods\n// @Does not check based on client !\n\nfunction _updateWorkflow() {\n  _updateWorkflow = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(id, title, content) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            result = indexedDB.workflows.update(id, {\n              title: title,\n              content: content\n            });\n            return _context14.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _updateWorkflow.apply(this, arguments);\n}\n\nexport function checkIfContactsExist() {\n  return _checkIfContactsExist.apply(this, arguments);\n}\n\nfunction _checkIfContactsExist() {\n  _checkIfContactsExist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n    var result, contactsExist;\n    return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            _context15.next = 2;\n            return indexedDB.contacts.toArray();\n\n          case 2:\n            result = _context15.sent;\n            contactsExist = result[0];\n\n            if (!contactsExist) {\n              _context15.next = 9;\n              break;\n            }\n\n            console.log(\"Yes workflows exist\");\n            return _context15.abrupt(\"return\", true);\n\n          case 9:\n            console.log(\"No workflows exist\");\n            return _context15.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _checkIfContactsExist.apply(this, arguments);\n}\n\nexport function checkIfContactsOfClientExist(_x16) {\n  return _checkIfContactsOfClientExist.apply(this, arguments);\n} // here      contacts:\"++id,client_id,full_name,first_name,last_name,email,phone,additional_information\",\n\nfunction _checkIfContactsOfClientExist() {\n  _checkIfContactsOfClientExist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(clientID) {\n    var allContacts, correctContacts;\n    return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            _context16.next = 2;\n            return indexedDB.contacts.toArray();\n\n          case 2:\n            allContacts = _context16.sent;\n            _context16.next = 5;\n            return allContacts.filter(function (val) {\n              return val.client_id === clientID;\n            });\n\n          case 5:\n            correctContacts = _context16.sent;\n\n            if (!correctContacts[0]) {\n              _context16.next = 10;\n              break;\n            }\n\n            return _context16.abrupt(\"return\", true);\n\n          case 10:\n            return _context16.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee16);\n  }));\n  return _checkIfContactsOfClientExist.apply(this, arguments);\n}\n\nexport function createContact(_x17, _x18, _x19, _x20, _x21, _x22, _x23) {\n  return _createContact.apply(this, arguments);\n}\n\nfunction _createContact() {\n  _createContact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(clientID, title, firstName, lastName, email, phoneNumber, additionalInformation) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            _context17.next = 2;\n            return indexedDB.contacts.add({\n              title: title,\n              additional_information: additionalInformation,\n              client_id: clientID,\n              first_name: firstName,\n              last_name: lastName,\n              email: email,\n              phone_number: phoneNumber\n            });\n\n          case 2:\n            result = _context17.sent;\n            return _context17.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _createContact.apply(this, arguments);\n}\n\nexport function deleteContact(_x24) {\n  return _deleteContact.apply(this, arguments);\n}\n\nfunction _deleteContact() {\n  _deleteContact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            result = indexedDB.contacts.where(\"id\").equals(id).delete();\n            return _context18.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee18);\n  }));\n  return _deleteContact.apply(this, arguments);\n}\n\nexport function getClientContacts(_x25) {\n  return _getClientContacts.apply(this, arguments);\n}\n\nfunction _getClientContacts() {\n  _getClientContacts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(clientID) {\n    var allContacts, correctContacts;\n    return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            _context19.next = 2;\n            return indexedDB.contacts.toArray();\n\n          case 2:\n            allContacts = _context19.sent;\n            _context19.next = 5;\n            return allContacts.filter(function (val) {\n              return val.client_id === clientID;\n            });\n\n          case 5:\n            correctContacts = _context19.sent;\n            return _context19.abrupt(\"return\", correctContacts);\n\n          case 7:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee19);\n  }));\n  return _getClientContacts.apply(this, arguments);\n}\n\nexport function deleteClientContacts(_x26) {\n  return _deleteClientContacts.apply(this, arguments);\n}\n\nfunction _deleteClientContacts() {\n  _deleteClientContacts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(clientId) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            result = indexedDB.contacts.where(\"client_id\").equals(clientId).delete();\n            return _context20.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _callee20);\n  }));\n  return _deleteClientContacts.apply(this, arguments);\n}\n\nexport function updateContact(_x27, _x28, _x29, _x30, _x31, _x32, _x33, _x34) {\n  return _updateContact.apply(this, arguments);\n} //___________________________________________________END Contacts methods\n//___________________________________________________BEGIN calendar event methods\n\nfunction _updateContact() {\n  _updateContact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(id, clientID, title, firstName, lastName, email, phoneNumber, additionalInformation) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            result = indexedDB.contacts.update(id, {\n              title: title,\n              additional_information: additionalInformation,\n              client_id: clientID,\n              first_name: firstName,\n              last_name: lastName,\n              email: email,\n              phone_number: phoneNumber\n            });\n            return _context21.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, _callee21);\n  }));\n  return _updateContact.apply(this, arguments);\n}\n\nexport function createCalendarEvent(_x35) {\n  return _createCalendarEvent.apply(this, arguments);\n}\n\nfunction _createCalendarEvent() {\n  _createCalendarEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(event) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            _context22.next = 2;\n            return indexedDB.calendar_events.add({\n              title: event.title,\n              description: event.description,\n              start: event.start,\n              end: event.end,\n              client_id: event.clientID,\n              user_id: event.userID,\n              client_name: event.clientName,\n              group_id: event.groupID\n            });\n\n          case 2:\n            result = _context22.sent;\n            return _context22.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, _callee22);\n  }));\n  return _createCalendarEvent.apply(this, arguments);\n}\n\nexport function getAllCalendarEvents() {\n  return _getAllCalendarEvents.apply(this, arguments);\n}\n\nfunction _getAllCalendarEvents() {\n  _getAllCalendarEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n    var allCalendarEvents;\n    return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            _context23.next = 2;\n            return indexedDB.calendar_events.toArray();\n\n          case 2:\n            allCalendarEvents = _context23.sent;\n            return _context23.abrupt(\"return\", allCalendarEvents);\n\n          case 4:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, _callee23);\n  }));\n  return _getAllCalendarEvents.apply(this, arguments);\n}\n\nexport function getClientCalendarEvents(_x36) {\n  return _getClientCalendarEvents.apply(this, arguments);\n}\n\nfunction _getClientCalendarEvents() {\n  _getClientCalendarEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(clientID) {\n    var allCalendarEvents, clientCalendarEvents;\n    return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n      while (1) {\n        switch (_context24.prev = _context24.next) {\n          case 0:\n            _context24.next = 2;\n            return indexedDB.calendar_events.toArray();\n\n          case 2:\n            allCalendarEvents = _context24.sent;\n            _context24.next = 5;\n            return allCalendarEvents.filter(function (val) {\n              return val.client_id === clientID;\n            });\n\n          case 5:\n            clientCalendarEvents = _context24.sent;\n            console.log(\"The client ID is: \" + clientID);\n            return _context24.abrupt(\"return\", clientCalendarEvents);\n\n          case 8:\n          case \"end\":\n            return _context24.stop();\n        }\n      }\n    }, _callee24);\n  }));\n  return _getClientCalendarEvents.apply(this, arguments);\n}\n\nexport function createCalendarEventGroupID(_x37, _x38, _x39) {\n  return _createCalendarEventGroupID.apply(this, arguments);\n}\n\nfunction _createCalendarEventGroupID() {\n  _createCalendarEventGroupID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(clientID, title, clientName) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n      while (1) {\n        switch (_context25.prev = _context25.next) {\n          case 0:\n            _context25.next = 2;\n            return indexedDB.calendar_event_group_id.add({\n              title: title,\n              client_name: clientName,\n              client_id: clientID\n            });\n\n          case 2:\n            result = _context25.sent;\n            return _context25.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context25.stop();\n        }\n      }\n    }, _callee25);\n  }));\n  return _createCalendarEventGroupID.apply(this, arguments);\n}\n\nexport function deleteCalendarEvent(_x40) {\n  return _deleteCalendarEvent.apply(this, arguments);\n}\n\nfunction _deleteCalendarEvent() {\n  _deleteCalendarEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n      while (1) {\n        switch (_context26.prev = _context26.next) {\n          case 0:\n            result = indexedDB.calendar_events.where(\"id\").equals(id).delete();\n            return _context26.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context26.stop();\n        }\n      }\n    }, _callee26);\n  }));\n  return _deleteCalendarEvent.apply(this, arguments);\n}\n\nexport function deleteGroupedCalendarEvents(_x41) {\n  return _deleteGroupedCalendarEvents.apply(this, arguments);\n}\n\nfunction _deleteGroupedCalendarEvents() {\n  _deleteGroupedCalendarEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(groupID) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n      while (1) {\n        switch (_context27.prev = _context27.next) {\n          case 0:\n            result = indexedDB.calendar_events.where(\"group_id\").equals(groupID).delete();\n            return _context27.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context27.stop();\n        }\n      }\n    }, _callee27);\n  }));\n  return _deleteGroupedCalendarEvents.apply(this, arguments);\n}\n\nexport function deleteClientCalendarEvents(_x42) {\n  return _deleteClientCalendarEvents.apply(this, arguments);\n} //___________________________________________________END calendar event methods\n\nfunction _deleteClientCalendarEvents() {\n  _deleteClientCalendarEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(clientId) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n      while (1) {\n        switch (_context28.prev = _context28.next) {\n          case 0:\n            result = indexedDB.calendar_events.where(\"client_id\").equals(clientId).delete();\n            return _context28.abrupt(\"return\", result);\n\n          case 2:\n          case \"end\":\n            return _context28.stop();\n        }\n      }\n    }, _callee28);\n  }));\n  return _deleteClientCalendarEvents.apply(this, arguments);\n}\n\nexport function exportDB() {\n  return _exportDB.apply(this, arguments);\n} //__________________________________________________BEGIN URL REST API\n//_________________________________________________END\n\nfunction _exportDB() {\n  _exportDB = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n    var blob;\n    return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            _context29.next = 2;\n            return exportDB(indexedDB, {\n              prettyJson: true\n            });\n\n          case 2:\n            blob = _context29.sent;\n            return _context29.abrupt(\"return\", blob);\n\n          case 4:\n          case \"end\":\n            return _context29.stop();\n        }\n      }\n    }, _callee29);\n  }));\n  return _exportDB.apply(this, arguments);\n}\n\nexport default indexedDB;","map":{"version":3,"sources":["/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/services/indexDB/index.js"],"names":["Dexie","indexedDB","version","stores","workflows","clients","contacts","calendar_events","calendar_event_group_id","user","databaseContainsData","toArray","clientsExist","workflowsExist","contactsExist","calendarEvents","calendarEventsExist","console","log","checkIfClientsExist","result","createClient","name","add","getAllClients","deleteClient","id","where","equals","delete","updateClient","update","getClientById","get","checkIfWorkflowsExist","checkIfWorkflowsOfClientExist","clientID","allWorkflows","filter","val","client_id","correctWorkflows","createWorkflow","title","content","deleteWorkflow","getClientWorkflows","deleteClientWorkflows","clientId","updateWorkflow","checkIfContactsExist","checkIfContactsOfClientExist","allContacts","correctContacts","createContact","firstName","lastName","email","phoneNumber","additionalInformation","additional_information","first_name","last_name","phone_number","deleteContact","getClientContacts","deleteClientContacts","updateContact","createCalendarEvent","event","description","start","end","user_id","userID","client_name","clientName","group_id","groupID","getAllCalendarEvents","allCalendarEvents","getClientCalendarEvents","clientCalendarEvents","createCalendarEventGroupID","deleteCalendarEvent","deleteGroupedCalendarEvents","deleteClientCalendarEvents","exportDB","prettyJson","blob"],"mappings":"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","sourcesContent":["import Dexie from 'dexie';\nimport 'dexie-observable';\n\n\nvar indexedDB = new Dexie(\"WorkflowMagicUserDB\");\nindexedDB.version(1).stores({\n    workflows: \"++id,client_id,content,title\",\n    clients: \"++id,name\",\n    // contacts:\"++id,client_id,content,title\",\n    contacts: \"++id,client_id,full_name,first_name,last_name,email,phone_number,additional_information\",\n\n    calendar_events: \"++id,start,end,title,description,client_name,client_id,group_id\",\n    calendar_event_group_id: \"++id, title, client_name, client_id\",\n    user: \"user_id\"\n});\n\n\n//___________________________________________________BEGIN check if ANY data exists\n\nexport async function databaseContainsData() {\n    const clients = await indexedDB.clients.toArray();\n    const clientsExist = clients[0];\n\n    const workflows = await indexedDB.workflows.toArray();\n    const workflowsExist = workflows[0];\n\n    const contacts = await indexedDB.contacts.toArray();\n    const contactsExist = contacts[0];\n\n    const calendarEvents = await indexedDB.calendar_events.toArray();\n    const calendarEventsExist = calendarEvents[0];\n\n\n    if (clientsExist || workflowsExist || contactsExist || calendarEventsExist) {\n        console.log(\"Yes the clients exist\");\n        return true\n\n    } else {\n        console.log(\"No clients exist\");\n        return false\n    }\n\n}\n\n//___________________________________________________END check if any data exists\n\n\n//___________________________________________________BEGIN Client methods\n\nexport async function checkIfClientsExist() {\n    const result = await indexedDB.clients.toArray();\n    const clientsExist = result[0];\n\n    if (clientsExist) {\n        console.log(\"Yes the clients exist\");\n        return true\n\n    } else {\n        console.log(\"No clients exist\");\n        return false\n    }\n\n}\n\n\nexport async function createClient(name) {\n    let result = await indexedDB.clients.add({ name: name });\n    return result\n}\n\n\nexport async function getAllClients() {\n    let result = await indexedDB.clients.toArray();\n    return result // returns an entire array (not individual objects)\n}\n\n\nexport async function deleteClient(id) {\n    let result = indexedDB.clients.where(\"id\").equals(id).delete();\n    return result\n}\n\n\nexport async function updateClient(id, name) {\n    let result = indexedDB.clients.update(id, { name: name })\n    return result\n}\n\n\nexport async function getClientById(id) {\n    let result = indexedDB.clients.get(id);\n    return result\n}\n\n//______________________________________________________END Client methods\n\n\n\n//___________________________________________________BEGIN Workflow methods\n\n\n// @Does not check based on client !\nexport async function checkIfWorkflowsExist() {\n    const result = await indexedDB.workflows.toArray();\n    const workflowsExist = result[0];\n\n    if (workflowsExist) {\n        console.log(\"Yes workflows exist\");\n\n        return true\n\n    } else {\n        console.log(\"No workflows exist\");\n        return false\n\n    }\n}\n\n\nexport async function checkIfWorkflowsOfClientExist(clientID) {\n\n    let allWorkflows = await indexedDB.workflows.toArray();\n    let correctWorkflows = await allWorkflows.filter((val) => {\n        return val.client_id === clientID\n    });\n\n    if (correctWorkflows[0]) {\n        return true\n    } else {\n        return false\n    }\n\n\n}\n\n\n\nexport async function createWorkflow(clientID, title, content) {\n    let result = await indexedDB.workflows.add({ title: title, content: content, client_id: clientID });\n    return result\n}\n\n\nexport async function deleteWorkflow(id) {\n    let result = indexedDB.workflows.where(\"id\").equals(id).delete();\n    return result\n}\n\n\nexport async function getClientWorkflows(clientID) {\n    let allWorkflows = await indexedDB.workflows.toArray();\n    let correctWorkflows = await allWorkflows.filter((val) => {\n        return val.client_id === clientID\n    });\n\n    return correctWorkflows\n\n}\n\nexport async function deleteClientWorkflows(clientId) {\n\n    let result = indexedDB.workflows.where(\"client_id\").equals(clientId).delete();\n    return result\n\n}\n\n\n\n\nexport async function updateWorkflow(id, title, content) {\n    let result = indexedDB.workflows.update(id, { title: title, content: content })\n    return result\n}\n\n\n\n//___________________________________________________END Workflow methods\n\n\n\n\n//___________________________________________________BEGIN Contacts methods\n\n\n// @Does not check based on client !\nexport async function checkIfContactsExist() {\n    const result = await indexedDB.contacts.toArray();\n    const contactsExist = result[0];\n\n    if (contactsExist) {\n        console.log(\"Yes workflows exist\");\n\n        return true\n\n    } else {\n        console.log(\"No workflows exist\");\n        return false\n\n    }\n}\n\n\nexport async function checkIfContactsOfClientExist(clientID) {\n\n    let allContacts = await indexedDB.contacts.toArray();\n    let correctContacts = await allContacts.filter((val) => {\n        return val.client_id === clientID\n    });\n\n    if (correctContacts[0]) {\n        return true\n    } else {\n        return false\n    }\n\n\n}\n\n// here      contacts:\"++id,client_id,full_name,first_name,last_name,email,phone,additional_information\",\n\n\nexport async function createContact(clientID, title, firstName, lastName, email, phoneNumber, additionalInformation) {\n    let result = await indexedDB.contacts.add({\n        title: title,\n        additional_information: additionalInformation,\n        client_id: clientID,\n        first_name: firstName,\n        last_name: lastName,\n        email: email,\n        phone_number: phoneNumber\n    });\n    return result\n}\n\n\nexport async function deleteContact(id) {\n    let result = indexedDB.contacts.where(\"id\").equals(id).delete();\n    return result\n}\n\n\n\nexport async function getClientContacts(clientID) {\n    let allContacts = await indexedDB.contacts.toArray();\n    let correctContacts = await allContacts.filter((val) => {\n        return val.client_id === clientID\n    });\n\n    return correctContacts\n\n}\n\n\n\nexport async function deleteClientContacts(clientId) {\n\n    let result = indexedDB.contacts.where(\"client_id\").equals(clientId).delete();\n    return result\n\n}\n\n\n\n\nexport async function updateContact(id, clientID, title, firstName, lastName, email, phoneNumber, additionalInformation) {\n    let result = indexedDB.contacts.update(id, {\n        title: title,\n        additional_information: additionalInformation,\n        client_id: clientID,\n        first_name: firstName,\n        last_name: lastName,\n        email: email,\n        phone_number: phoneNumber\n    })\n    return result\n}\n\n\n\n//___________________________________________________END Contacts methods\n\n\n\n\n//___________________________________________________BEGIN calendar event methods\n\n\nexport async function createCalendarEvent(event) {\n\n\n    let result = await indexedDB.calendar_events.add({\n        title: event.title,\n        description: event.description,\n        start: event.start,\n        end: event.end,\n        client_id: event.clientID,\n        user_id: event.userID,\n        client_name: event.clientName,\n        group_id: event.groupID\n    });\n\n    return result\n}\n\n\n\nexport async function getAllCalendarEvents() {\n    let allCalendarEvents = await indexedDB.calendar_events.toArray();\n    return allCalendarEvents\n}\n\n\nexport async function getClientCalendarEvents(clientID) {\n    let allCalendarEvents = await indexedDB.calendar_events.toArray();\n    let clientCalendarEvents = await allCalendarEvents.filter((val) => {\n        return val.client_id === clientID\n    });\n    console.log(\"The client ID is: \" + clientID)\n    return clientCalendarEvents\n\n}\n\n\n\n\nexport async function createCalendarEventGroupID(clientID, title, clientName) {\n    let result = await indexedDB.calendar_event_group_id.add({ title: title, client_name: clientName, client_id: clientID });\n    return result\n}\n\n\nexport async function deleteCalendarEvent(id) {\n    let result = indexedDB.calendar_events.where(\"id\").equals(id).delete();\n    return result\n}\n\n\nexport async function deleteGroupedCalendarEvents(groupID) {\n    let result = indexedDB.calendar_events.where(\"group_id\").equals(groupID).delete();\n    return result\n}\n\nexport async function deleteClientCalendarEvents(clientId) {\n    let result = indexedDB.calendar_events.where(\"client_id\").equals(clientId).delete();\n    return result\n\n}\n\n\n\n//___________________________________________________END calendar event methods\n\n\nexport async function exportDB() {\n    const blob = await exportDB(indexedDB, { prettyJson: true });\n    return blob\n}\n\n//__________________________________________________BEGIN URL REST API\n\n\n\n\n\n\n\n\n\n//_________________________________________________END\n\nexport default indexedDB"]},"metadata":{},"sourceType":"module"}