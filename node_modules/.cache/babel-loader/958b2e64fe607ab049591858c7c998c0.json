{"ast":null,"code":"import _slicedToArray from \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/PageComponents/Calendar/ClientSearch.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport db, { getAllClients, createClient, deleteClient } from \"../../services/indexDB\";\nimport REST from \"../../services/rest\";\nimport style from \"../../PageComponents/Calendar/style\";\nimport { instantSearchFilter } from '../../helper_functions';\n\nfunction SearchClients(props) {\n  var _this = this;\n\n  var classes = props.classes,\n      setSelectedClient = props.setSelectedClient,\n      openCreateEventModal = props.openCreateEventModal,\n      redirectToWorkflows = props.redirectToWorkflows,\n      modalOpenEditEvent = props.modalOpenEditEvent,\n      modalOpenCreateEvent = props.modalOpenCreateEvent;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      clientList = _useState2[0],\n      setClientList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      instanSearchedClientList = _useState4[0],\n      setInstanSearchedClientList = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      clientNameInForm = _useState6[0],\n      setClientNameInForm = _useState6[1];\n\n  var _useState7 = useState(-1),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectedClientViaArrowKeypress = _useState8[0],\n      setSelectedClientViaArrowKeypress = _useState8[1];\n\n  var inputRef = useRef();\n  var containerRef = useRef(null);\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      focus = _useState10[0],\n      setFocus = _useState10[1];\n\n  useEffect(function () {\n    // @Get all clients\n    getAllClients().then(function (clients) {\n      setClientList(clients);\n    });\n  }, []);\n  useEffect(function () {\n    setInstanSearchedClientList(clientList);\n  }, [clientList]); // @ Arrow Up/Down selection. \n\n  useEffect(function () {\n    function handleKeyPress(event) {\n      if (event.key === \"ArrowDown\") {\n        setSelectedClientViaArrowKeypress(function (prev) {\n          return instanSearchedClientList.length - 1 === prev ? -1 : prev + 1;\n        });\n      }\n\n      if (event.key === \"ArrowUp\") {\n        setSelectedClientViaArrowKeypress(function (prev) {\n          return -1 === prev ? instanSearchedClientList.length - 1 : prev - 1;\n        });\n      }\n\n      if (event.key === \"Enter\" && !focus) {\n        // && modal NOT open\n        var client = instanSearchedClientList[selectedClientViaArrowKeypress]; // openmodal and pass in info\n        // alert(modalOpenCreateEvent)\n        // setSelectedClient(()=>{\n        //  openCreateEventModal(event,client)\n        //  return client\n        // })\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyPress);\n    return function () {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [clientList, instanSearchedClientList, selectedClientViaArrowKeypress, focus]);\n  useEffect(function () {\n    if (selectedClientViaArrowKeypress === -1) {\n      inputRef.current.focus();\n    } else {\n      inputRef.current.blur();\n    }\n  }, [inputRef, selectedClientViaArrowKeypress]);\n\n  function handleChangeWithInstantSearch(evt) {\n    setClientNameInForm(evt.target.value);\n    setInstanSearchedClientList(instantSearchFilter(evt.target.value.trim(), clientList));\n  }\n\n  function onFocusHandler() {\n    setFocus(true);\n  }\n\n  function offFocusHandler() {\n    setFocus(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.searchForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    inputRef: inputRef,\n    onChange: handleChangeWithInstantSearch,\n    value: clientNameInForm,\n    autoComplete: \"off\",\n    id: \"standard-dense\",\n    label: \"CLIENT NAME\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    placeholder: \"SEARCH CLIENT LIST\",\n    type: \"text\",\n    onFocus: onFocusHandler,\n    onBlur: offFocusHandler,\n    name: \"client-list\",\n    autoFocus: \"true\",\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(List, {\n    className: classes.listContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 15\n    }\n  }, instanSearchedClientList.map(function (val, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: classes.clientItemContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      onClick: function onClick(event) {\n        setSelectedClient(function () {\n          openCreateEventModal(event, val);\n          return val;\n        });\n      },\n      alignItems: \"center\",\n      className: selectedClientViaArrowKeypress === index ? classes.clientItemSelected : classes.clientItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 32\n      }\n    }, val.name), /*#__PURE__*/React.createElement(Button, {\n      className: classes.clientButton,\n      onClick: alert,\n      variant: \"contained\",\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 32\n      }\n    }, \"Show Only\"), /*#__PURE__*/React.createElement(Button, {\n      className: classes.clientButton,\n      onClick: function onClick() {\n        return redirectToWorkflows(val);\n      },\n      variant: \"contained\",\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 32\n      }\n    }, \"Workflows\"), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 32\n      }\n    }));\n  })));\n}\n\nSearchClients.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nvar styles = function styles(theme) {\n  return style(theme);\n};\n\nexport default withStyles(styles)(SearchClients);\n{\n  /*\n  \n               <form className={classes.searchForm}>\n                   <TextField \n                       onChange = {(event)=>instantSearchHandler(event)}\n                       value=\"search\"\n                       autoComplete = \"off\"\n                       id=\"standard-dense\"\n                       label=\"CLIENT NAME\"\n                       className={classes.textField}\n                       margin=\"normal\"\n                       variant=\"outlined\"\n                       placeholder=\"SEARCH CLIENT LIST\"\n                       type=\"text\"\n                       name = \"client-list\"\n                       InputLabelProps={{\n                        shrink: true,\n                      }}\n                   />\n                    <br/>\n               </form>\n  \n                <List className={classes.listContainer}> \n                              \n                     {\n                        clientList.map((val,index)=>{\n                   \n                           return (\n                             <div key={index} className = {classes.clientItemContainer}>\n                                <ListItem onClick={(event)=>{\n                                  setSelectedClient(()=>{\n                                   openCreateEventModal(event,val)\n                                   return val\n                                  })\n  \n                                 \n                                 console.log(val)\n                                \n                                 \n                                }}  alignItems=\"center\" className={classes.listItemCenter}>{val.name}</ListItem>\n                                 <Button onClick={alert} variant=\"contained\" color=\"primary\">Show Only</Button>\n                                 <Button onClick={()=>redirectToWorkflows(val)} variant=\"contained\" color=\"primary\">Workflows</Button>\n                             </div>\n                           );\n                           \n                        })\n                      }\n                </List>\n  \n  */\n}","map":{"version":3,"sources":["/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/PageComponents/Calendar/ClientSearch.js"],"names":["React","useState","useEffect","useRef","PropTypes","withStyles","Grid","ListItem","List","Button","IconButton","TextField","DeleteIcon","db","getAllClients","createClient","deleteClient","REST","style","instantSearchFilter","SearchClients","props","classes","setSelectedClient","openCreateEventModal","redirectToWorkflows","modalOpenEditEvent","modalOpenCreateEvent","clientList","setClientList","instanSearchedClientList","setInstanSearchedClientList","clientNameInForm","setClientNameInForm","selectedClientViaArrowKeypress","setSelectedClientViaArrowKeypress","inputRef","containerRef","focus","setFocus","then","clients","handleKeyPress","event","key","prev","length","client","document","addEventListener","removeEventListener","current","blur","handleChangeWithInstantSearch","evt","target","value","trim","onFocusHandler","offFocusHandler","searchForm","textField","shrink","listContainer","map","val","index","clientItemContainer","clientItemSelected","clientItem","name","clientButton","alert","propTypes","object","isRequired","styles","theme"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useRef} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport db,{getAllClients, createClient, deleteClient} from \"../../services/indexDB\";\nimport REST from \"../../services/rest\";\nimport style from \"../../PageComponents/Calendar/style\";\nimport {instantSearchFilter} from '../../helper_functions';\n\n\nfunction SearchClients(props){\n\n\tconst {classes,setSelectedClient,openCreateEventModal,redirectToWorkflows,modalOpenEditEvent,modalOpenCreateEvent} = props\n    const [clientList, setClientList] = useState([]);\n    const [instanSearchedClientList,setInstanSearchedClientList] = useState([]);\n    const [clientNameInForm, setClientNameInForm] = useState([]);\n    const [selectedClientViaArrowKeypress,setSelectedClientViaArrowKeypress] = useState(-1);\n    const inputRef = useRef();\n    const containerRef = useRef(null);\n    const [focus, setFocus] = useState(true);\n\n    useEffect(() => { // @Get all clients\n\t      getAllClients().then((clients)=>{\n\t          setClientList(clients)\n\t      })\n    },[]);\n\n\n  useEffect(()=>{\n\n    setInstanSearchedClientList(clientList);\n    \n  },[clientList]);\n\n   \n\n   // @ Arrow Up/Down selection. \n  useEffect(() => {\n      function handleKeyPress(event){\n\n      \n        if(event.key === \"ArrowDown\"){\n           setSelectedClientViaArrowKeypress((prev)=>{\n        \n                return instanSearchedClientList.length  - 1 === prev ? -1 : prev + 1;\n                \n           });\n               \n        }\n\n        if(event.key === \"ArrowUp\"){\n       \n           setSelectedClientViaArrowKeypress((prev)=>{\n\n                  return -1 === prev ? instanSearchedClientList.length - 1 : prev - 1;\n                 \n           });\n               \n        }\n\n        if(event.key === \"Enter\" && !focus){   // && modal NOT open\n     \n        \n\n\n          const client = instanSearchedClientList[selectedClientViaArrowKeypress];\n\n          // openmodal and pass in info\n            // alert(modalOpenCreateEvent)\n\n\n                                 // setSelectedClient(()=>{\n                                 //  openCreateEventModal(event,client)\n                                 //  return client\n                                 // })\n\n       \n        }\n\n      }\n\n\n       document.addEventListener('keydown', handleKeyPress)\n       return () => {\n         document.removeEventListener('keydown', handleKeyPress)\n       }\n\n  },[clientList,instanSearchedClientList,selectedClientViaArrowKeypress,focus]);\n\n\n  useEffect(()=>{\n\n      if(selectedClientViaArrowKeypress === -1){\n        inputRef.current.focus()\n       }else{\n        inputRef.current.blur()\n       }\n \n  },[inputRef,selectedClientViaArrowKeypress])\n\n\n\n\n\n  function handleChangeWithInstantSearch(evt){\n\n    setClientNameInForm(evt.target.value);\n\n    setInstanSearchedClientList(\n        instantSearchFilter(evt.target.value.trim(),clientList)\n    );\n\n  }\n\n   function onFocusHandler() {\n       setFocus(true);\n   }\n\n   function offFocusHandler() {\n       setFocus(false);\n\n   }\n\n\n\n    return(\n    \t<div ref={containerRef}>\n           <form className={classes.searchForm}>\n                  <TextField \n                   inputRef = {inputRef}\n                      onChange = {handleChangeWithInstantSearch}\n                      value={clientNameInForm}\n                      autoComplete = \"off\"\n                      id=\"standard-dense\"\n                      label=\"CLIENT NAME\"\n                      className={classes.textField}\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      placeholder=\"SEARCH CLIENT LIST\"\n                      type=\"text\"\n                      onFocus = {onFocusHandler}\n                      onBlur= {offFocusHandler}\n                      name = \"client-list\"\n                      autoFocus = \"true\"\n                      InputLabelProps={{\n                       shrink: true,\n                      }}\n                  />\n\n                  <br/>\n              </form>\n          \n\n\n\n              <List className={classes.listContainer}> \n                             \n                    {\n                       instanSearchedClientList.map((val,index)=>{\n                  \n                          return (\n                            <div key={index} className = {classes.clientItemContainer}>\n                               <ListItem onClick={(event)=>{\n                                 setSelectedClient(()=>{\n                                  openCreateEventModal(event,val)\n                                  return val\n                                 })\n\n                               }}  alignItems=\"center\" className = { selectedClientViaArrowKeypress === index\n\n                                ? classes.clientItemSelected\n                                : classes.clientItem}>\n\n                              {val.name}\n\n                              </ListItem>\n                               <Button className={classes.clientButton} onClick={alert} variant=\"contained\" color=\"primary\">Show Only</Button>\n                               <Button className={classes.clientButton}  onClick={()=>redirectToWorkflows(val)} variant=\"contained\" color=\"primary\">Workflows</Button>\n                               <hr/>\n                            </div>\n                          );\n                       })\n                     }\n\n              </List>\n        </div>\n    )\n\n}\n\n\nSearchClients.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\nconst styles = theme => (style(theme));\nexport default withStyles(styles)(SearchClients);\n\n\n\n{/*\n\n\n              <form className={classes.searchForm}>\n                  <TextField \n                      onChange = {(event)=>instantSearchHandler(event)}\n                      value=\"search\"\n                      autoComplete = \"off\"\n                      id=\"standard-dense\"\n                      label=\"CLIENT NAME\"\n                      className={classes.textField}\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      placeholder=\"SEARCH CLIENT LIST\"\n                      type=\"text\"\n                      name = \"client-list\"\n                      InputLabelProps={{\n                       shrink: true,\n                     }}\n                  />\n\n                  <br/>\n              </form>\n\n\n\n              <List className={classes.listContainer}> \n                             \n                    {\n                       clientList.map((val,index)=>{\n                  \n                          return (\n                            <div key={index} className = {classes.clientItemContainer}>\n                               <ListItem onClick={(event)=>{\n                                 setSelectedClient(()=>{\n                                  openCreateEventModal(event,val)\n                                  return val\n                                 })\n\n\n                                \n                                console.log(val)\n                               \n                                \n                               }}  alignItems=\"center\" className={classes.listItemCenter}>{val.name}</ListItem>\n\n                               <Button onClick={alert} variant=\"contained\" color=\"primary\">Show Only</Button>\n\n                               <Button onClick={()=>redirectToWorkflows(val)} variant=\"contained\" color=\"primary\">Workflows</Button>\n                            </div>\n                          );\n                          \n                       })\n                     }\n\n              </List>\n\n\n*/}"]},"metadata":{},"sourceType":"module"}