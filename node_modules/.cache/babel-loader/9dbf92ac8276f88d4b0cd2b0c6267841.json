{"ast":null,"code":"import _slicedToArray from \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/PageComponents/Landing/CreateClients/index.js\";\nimport React, { useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { instantSearchFilter } from '../../../helper_functions';\nimport \"../../../PageComponents/fonts/index.css\";\nimport db, { getAllClients, deleteClientContacts, createClient, deleteClient, getClientWorkflows, deleteClientWorkflows, deleteClientCalendarEvents } from \"../../../services/indexDB\";\nimport createClientsStyle from \"../../../PageComponents/Landing/CreateClients/style\";\nimport { useMorph } from 'react-morph'; //____________________________________\n\nfunction trimString(str) {\n  return str.trim();\n} //___________________________________\n\n\nfunction CreateClients(props) {\n  var _this = this;\n\n  //____client state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      clientList = _useState2[0],\n      setClientList = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focus = _useState4[0],\n      setFocus = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      instanSearchedClientList = _useState6[0],\n      setInstanSearchedClientList = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      clientNameInForm = _useState8[0],\n      setClientNameInForm = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      clientListUseEffectTrigger = _useState10[0],\n      clientListUseEffectTriggerFunk = _useState10[1];\n\n  var _useState11 = useState(-1),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedClientViaArrowKeypress = _useState12[0],\n      setSelectedClientViaArrowKeypress = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      showCalendar = _useState14[0],\n      setShowCalendar = _useState14[1];\n\n  var inputRef = useRef(); //_________________________________________BEGIN Listener ... anytime IndexDB changes we update our entire useState() collection(s)\n\n  useEffect(function () {\n    getAllClients().then(function (clients) {\n      setClientList(clients);\n    });\n  }, [clientListUseEffectTrigger]); //_________________________________________END Listener\n\n  useEffect(function () {\n    if (clientList.length) {\n      props.setClientsDoExist(true);\n    } else {\n      props.setClientsDoExist(false);\n    }\n  }, [clientList]);\n  useEffect(function () {\n    setInstanSearchedClientList(clientList);\n  }, [clientList]); // @ Arrow Up/Down selection. \n\n  useEffect(function () {\n    function handleKeyPress(event) {\n      if (event.key === \"ArrowDown\") {\n        setSelectedClientViaArrowKeypress(function (prev) {\n          return instanSearchedClientList.length - 1 === prev ? -1 : prev + 1;\n        });\n      }\n\n      if (event.key === \"ArrowUp\") {\n        setSelectedClientViaArrowKeypress(function (prev) {\n          return -1 === prev ? instanSearchedClientList.length - 1 : prev - 1;\n        });\n      }\n\n      if (event.key === \"Enter\" && !focus) {\n        var client = instanSearchedClientList[selectedClientViaArrowKeypress];\n        window.location.href = \"/client/\".concat(client.id, \"/client-name/\").concat(client.name, \"/dashboard\");\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyPress);\n    return function () {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [clientList, instanSearchedClientList, selectedClientViaArrowKeypress, focus]);\n  useEffect(function () {\n    if (selectedClientViaArrowKeypress === -1) {\n      inputRef.current.focus();\n    } else {\n      inputRef.current.blur();\n    }\n  }, [inputRef, selectedClientViaArrowKeypress]); //_________________________________________________\n\n  useLayoutEffect(function () {\n    console.log(instanSearchedClientList[selectedClientViaArrowKeypress]);\n  });\n\n  function addClientToIndexDB(event) {\n    event.preventDefault();\n    var clientNameInFormTrimmed = trimString(clientNameInForm); // Check if form is empty\n\n    if (clientNameInFormTrimmed) {\n      createClient(clientNameInFormTrimmed).then(function (id) {\n        clientListUseEffectTriggerFunk(id + Math.random()); // Math.random is used to insure that trigger always fires. No other reason.\n\n        setClientNameInForm(\"\");\n      });\n    } else {\n      alert(\"Form can not be empty\");\n    }\n  }\n\n  function deleteClientFromIndexDB(event, id) {\n    console.log(id);\n    deleteClientWorkflows(id).then(function (result) {\n      return result;\n    });\n    deleteClientContacts(id).then(function (result) {\n      return result;\n    });\n    deleteClientCalendarEvents(id + \"\").then(function (result) {\n      console.log(result);\n      return result;\n    });\n    deleteClient(id).then(function (result) {\n      clientListUseEffectTriggerFunk(id + Math.random()); // Math.random is used to insure that trigger always fires. No other reason.\n    });\n  } //@ Instant Search Listener\n\n\n  function handleChangeWithInstantSearch(evt) {\n    setClientNameInForm(evt.target.value);\n    setInstanSearchedClientList(instantSearchFilter(evt.target.value.trim(), clientList));\n  }\n\n  function onFocusHandler() {\n    setFocus(true);\n  }\n\n  function offFocusHandler() {\n    setFocus(false);\n  }\n\n  useLayoutEffect(function () {\n    console.log(focus);\n  });\n\n  function displayCalendar() {\n    if (showCalendar) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 12\n        }\n      }, \" Calendar \");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 12\n        }\n      }, \" No fucker \");\n    }\n  }\n\n  var classes = props.classes;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    lg: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: function onSubmit(event) {\n      addClientToIndexDB(event);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    inputRef: inputRef,\n    onChange: handleChangeWithInstantSearch,\n    value: clientNameInForm,\n    onFocus: onFocusHandler,\n    onBlur: offFocusHandler,\n    autoComplete: \"off\",\n    id: \"standard-dense\",\n    label: \"CLIENT NAME\",\n    className: classes.textField,\n    margin: \"normal\",\n    variant: \"outlined\",\n    placeholder: \"Type the name of a client or company that you work with\",\n    type: \"text\",\n    name: \"client-name\",\n    autoFocus: \"true\",\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    className: classes.clientButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 23\n    }\n  }, \"CREATE CLIENT\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 19\n    }\n  }, instanSearchedClientList.map(function (val, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(ListItem, {\n      key: index,\n      className: selectedClientViaArrowKeypress === index ? classes.clientItemSelected : classes.clientItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.trashIconContainer,\n      onClick: function onClick(event) {\n        return deleteClientFromIndexDB(event, val.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: classes.trashIcon,\n      edge: \"end\",\n      \"aria-label\": \"delete\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(DeleteIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/client/\".concat(val.id, \"/client-name/\").concat(val.name, \"/dashboard\"),\n      className: classes.clientItemLink,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 29\n      }\n    }, val.name)), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 29\n      }\n    }));\n  }))))));\n}\n\nCreateClients.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nvar styles = function styles(theme) {\n  return createClientsStyle(theme);\n};\n\nexport default withStyles(styles)(CreateClients);\n/*\n\nDOCUMENTATION\n\nLanding:  allows users to create, delete and view Clients.\n\nWhen the page loads: useEffect loads all clients from IndexedDB via getAllClients(). getAllClients() is available\nat indexDB/index.js.\n\nEvery time a user adds or deletes a client a useState function named clientListUseEffectTriggerFunk() is invoked. useEffect is listening for this STATE CHANGE\nand in turn on each addClient or deleteClient request a call to indexedDB is made to re-populate clientList.\n\n\n*/","map":{"version":3,"sources":["/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/PageComponents/Landing/CreateClients/index.js"],"names":["React","useState","useEffect","useLayoutEffect","useRef","PropTypes","withStyles","Grid","ListItem","Button","IconButton","TextField","DeleteIcon","instantSearchFilter","db","getAllClients","deleteClientContacts","createClient","deleteClient","getClientWorkflows","deleteClientWorkflows","deleteClientCalendarEvents","createClientsStyle","useMorph","trimString","str","trim","CreateClients","props","clientList","setClientList","focus","setFocus","instanSearchedClientList","setInstanSearchedClientList","clientNameInForm","setClientNameInForm","clientListUseEffectTrigger","clientListUseEffectTriggerFunk","selectedClientViaArrowKeypress","setSelectedClientViaArrowKeypress","showCalendar","setShowCalendar","inputRef","then","clients","length","setClientsDoExist","handleKeyPress","event","key","prev","client","window","location","href","id","name","document","addEventListener","removeEventListener","current","blur","console","log","addClientToIndexDB","preventDefault","clientNameInFormTrimmed","Math","random","alert","deleteClientFromIndexDB","result","handleChangeWithInstantSearch","evt","target","value","onFocusHandler","offFocusHandler","displayCalendar","classes","root","container","textField","shrink","clientButton","map","val","index","clientItemSelected","clientItem","trashIconContainer","trashIcon","clientItemLink","propTypes","object","isRequired","styles","theme"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useLayoutEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {instantSearchFilter} from '../../../helper_functions';\nimport \"../../../PageComponents/fonts/index.css\";\nimport db,{getAllClients,deleteClientContacts, createClient, deleteClient, getClientWorkflows,  deleteClientWorkflows,deleteClientCalendarEvents} from \"../../../services/indexDB\";\nimport createClientsStyle from \"../../../PageComponents/Landing/CreateClients/style\";\nimport { useMorph } from 'react-morph';\n\n//____________________________________\n\n\nfunction trimString(str){\n  return  str.trim();\n}\n\n//___________________________________\n\n\nfunction CreateClients(props) {\n\n\n    //____client state\n    const [clientList,setClientList] = useState([]);\n    const [focus, setFocus] = useState(true);\n    const [instanSearchedClientList,setInstanSearchedClientList] = useState([]);\n    const [clientNameInForm, setClientNameInForm] = useState(\"\");\n    const [clientListUseEffectTrigger, clientListUseEffectTriggerFunk] = useState(0);\n    const [selectedClientViaArrowKeypress,setSelectedClientViaArrowKeypress] = useState(-1);\n    const [showCalendar, setShowCalendar] = useState(false)\n    const inputRef = useRef();\n\n  //_________________________________________BEGIN Listener ... anytime IndexDB changes we update our entire useState() collection(s)\n\n  useEffect(()=>{\n\n    getAllClients().then((clients)=>{\n      setClientList(clients)\n    });\n\n  },[clientListUseEffectTrigger]);\n\n\n  //_________________________________________END Listener\n\n  useEffect(()=>{\n\n     if(clientList.length){\n       props.setClientsDoExist(true)\n     }else{\n        props.setClientsDoExist(false)\n     }\n\n  },[clientList]);\n\n\n  useEffect(()=>{\n\n    setInstanSearchedClientList(clientList);\n    \n  },[clientList]);\n\n\n\n   // @ Arrow Up/Down selection. \n  useEffect(() => {\n      function handleKeyPress(event){\n\n      \n        if(event.key === \"ArrowDown\"){\n           setSelectedClientViaArrowKeypress((prev)=>{\n        \n                return instanSearchedClientList.length  - 1 === prev ? -1 : prev + 1;\n                \n           });\n               \n        }\n\n        if(event.key === \"ArrowUp\"){\n       \n           setSelectedClientViaArrowKeypress((prev)=>{\n\n                  return -1 === prev ? instanSearchedClientList.length - 1 : prev - 1;\n                 \n           });\n               \n        }\n\n        if(event.key === \"Enter\" && !focus){\n          const client = instanSearchedClientList[selectedClientViaArrowKeypress];\n\n          window.location.href = `/client/${client.id}/client-name/${client.name}/dashboard`;\n       \n        }\n\n      }\n\n\n       document.addEventListener('keydown', handleKeyPress)\n       return () => {\n         document.removeEventListener('keydown', handleKeyPress)\n       }\n\n  },[clientList,instanSearchedClientList,selectedClientViaArrowKeypress,focus]);\n\n\n\n\n  useEffect(()=>{\n\n      if(selectedClientViaArrowKeypress === -1){\n        inputRef.current.focus()\n       }else{\n        inputRef.current.blur()\n       }\n \n    },[inputRef,selectedClientViaArrowKeypress])\n\n\n\n\n\n  //_________________________________________________\n\n  useLayoutEffect(()=>{\n    console.log(instanSearchedClientList[selectedClientViaArrowKeypress])\n  })\n\n\n  \n\n  function addClientToIndexDB(event){\n        event.preventDefault();\n\n        let clientNameInFormTrimmed = trimString(clientNameInForm); // Check if form is empty\n\n        if(clientNameInFormTrimmed){\n\n            createClient(clientNameInFormTrimmed).then((id)=>{\n               clientListUseEffectTriggerFunk(id + Math.random());    // Math.random is used to insure that trigger always fires. No other reason.\n               setClientNameInForm(\"\");\n\n            });\n\n        }else{\n          alert(\"Form can not be empty\")\n        }\n       \n  }\n\n  \n\n  function deleteClientFromIndexDB(event,id){\n        \n         console.log(id)\n       deleteClientWorkflows(id).then((result)=>{\n        return result\n       })\n\n        deleteClientContacts(id).then((result)=>{\n        return result\n       })\n\n\n      \n       deleteClientCalendarEvents(id + \"\").then((result) => {\n           console.log(result)\n           return result\n       })\n\n \n      deleteClient(id).then((result)=>{\n\n\n          clientListUseEffectTriggerFunk(id + Math.random())  // Math.random is used to insure that trigger always fires. No other reason.\n      });\n\n\n\n\n   }\n\n\n\n  //@ Instant Search Listener\n  function handleChangeWithInstantSearch(evt){\n\n    setClientNameInForm(evt.target.value);\n\n    setInstanSearchedClientList(\n        instantSearchFilter(evt.target.value.trim(),clientList)\n    );\n\n  }\n\n function onFocusHandler(){\n    setFocus(true);\n }\n\n function offFocusHandler(){\n    setFocus(false);\n\n }\n\n useLayoutEffect(()=>{\n  console.log(focus);\n })\n\n function displayCalendar(){\n  if(showCalendar){\n    return <div> Calendar </div>\n  }else{\n    return <div> No fucker </div>\n  }\n }\n\n\n  const { classes } = props;\n\n   return (\n          \n      <div className={classes.root}>\n      \n          <Grid lg={12}>\n              <div className={classes.container}>\n              \n                  <form onSubmit={(event)=>{addClientToIndexDB(event)}}>\n                      <TextField \n\n                        inputRef = {inputRef}\n                        onChange={handleChangeWithInstantSearch}\n                        value={clientNameInForm}\n                        onFocus = {onFocusHandler}\n                        onBlur= {offFocusHandler}\n                        autoComplete=\"off\" \n                        id=\"standard-dense\" \n                        label=\"CLIENT NAME\" \n                        className={classes.textField} margin=\"normal\" \n                        variant=\"outlined\" \n                        placeholder=\"Type the name of a client or company that you work with\" \n                        type=\"text\" name=\"client-name\" \n                        autoFocus = \"true\"\n                        InputLabelProps={{\n                         shrink: true,\n                      }} />\n\n                      <br />\n                      <Button variant=\"contained\" type=\"submit\" color=\"primary\" className={classes.clientButton}>CREATE CLIENT</Button>\n\n                  </form>\n\n                      <Grid item xs={12} sm={12}>\n\n\n                  <ul>\n                      {instanSearchedClientList.map((val,index)=>{\n                          return  (\n                          <div key={index}>\n                     \n                          <ListItem key={index} className={\n                              selectedClientViaArrowKeypress === index\n                              ? classes.clientItemSelected\n                              : classes.clientItem\n                          }>\n\n                              <span className={classes.trashIconContainer} onClick={(event)=>deleteClientFromIndexDB(event,val.id)}>\n                                 <IconButton className={classes.trashIcon} edge=\"end\" aria-label=\"delete\">\n                                    <DeleteIcon />\n                                 </IconButton>\n                              </span>\n\n\n                            <a href={`/client/${val.id}/client-name/${val.name}/dashboard`} className={classes.clientItemLink}>\n                             {val.name} \n                            </a>\n                          \n\n                            </ListItem>\n                            <hr/>\n                        \n                            </div>\n                       \n                            )\n                      })}\n                      \n                  </ul>\n\n               </Grid>\n            </div>\n        </Grid>\n            \n      </div>\n\n    );\n}\n\n\n\nCreateClients.propTypes = {\n  classes: PropTypes.object.isRequired\n}\n\n\nconst styles = (theme)=>(createClientsStyle(theme));\n\nexport default withStyles(styles)(CreateClients)\n\n\n/*\n\nDOCUMENTATION\n\nLanding:  allows users to create, delete and view Clients.\n\nWhen the page loads: useEffect loads all clients from IndexedDB via getAllClients(). getAllClients() is available\nat indexDB/index.js.\n\nEvery time a user adds or deletes a client a useState function named clientListUseEffectTriggerFunk() is invoked. useEffect is listening for this STATE CHANGE\nand in turn on each addClient or deleteClient request a call to indexedDB is made to re-populate clientList.\n\n\n*/"]},"metadata":{},"sourceType":"module"}