{"ast":null,"code":"import _defineProperty from \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/PageComponents/Contacts/index.js\";\nimport React, { useContext, useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Loader from '../Loader';\nimport EventNoteIcon from '@material-ui/icons/EventNote';\nimport Box from '@material-ui/core/Box';\nimport 'react-quill/dist/quill.snow.css'; // ES6\n\nimport clientContactsStyle from '../../PageComponents/Contacts/style';\nimport db, { getClientById, deleteContact, createContact, getClientContacts, updateContact, checkIfContactsOfClientExist } from \"../.././services/indexDB\";\nimport Context from \"../.././services/context\";\nimport restUrlToObject, { instantSearchContactFilter } from '../.././helper_functions';\nimport ContactContent from '../../PageComponents/Contacts/ContactContent';\nimport ContactTextEditor from '../../PageComponents/Contacts/ContactTextEditor'; //\n\nfunction Contacts(props) {\n  var _this = this;\n\n  var classes = props.classes; // @Loader\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loadingBool = _useState2[0],\n      setloadingBool = _useState2[1]; // @These state handlers get client info\n\n\n  var clientNameDefault = restUrlToObject(window.location.pathname)[\"client-name\"];\n\n  var _useState3 = useState(clientNameDefault),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clientName = _useState4[0],\n      updateClientName = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      clientIDfromURL = _useState6[0],\n      setclientIDfromURL = _useState6[1]; // @These state handlers are used to toggle between component Views: contact editing, contact text creation and content display \n\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showTextEditor = _useState8[0],\n      setShowTextEditor = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showContacts = _useState10[0],\n      setShowContacts = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      showContactContent = _useState12[0],\n      setShowContactContent = _useState12[1];\n\n  function resetRenders() {\n    setShowTextEditor(false);\n    setShowContacts(false);\n    setShowContactContent(false);\n  } // @These state handlers get and set contact info\n\n\n  var _useState13 = useState(undefined),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedContact = _useState14[0],\n      setSelectedContact = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      editingContact = _useState16[0],\n      setEditingContact = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      contactsList = _useState18[0],\n      updateContactsList = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      contactsQueryTrigger = _useState20[0],\n      setContactsQueryTrigger = _useState20[1];\n\n  var _useState21 = useState(\"\"),\n      _useState22 = _slicedToArray(_useState21, 2),\n      title = _useState22[0],\n      setTitle = _useState22[1];\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      fullName = _useState24[0],\n      setFullName = _useState24[1];\n\n  var _useState25 = useState(\"\"),\n      _useState26 = _slicedToArray(_useState25, 2),\n      firstName = _useState26[0],\n      setFirstName = _useState26[1];\n\n  var _useState27 = useState(\"\"),\n      _useState28 = _slicedToArray(_useState27, 2),\n      lastName = _useState28[0],\n      setLastName = _useState28[1];\n\n  var _useState29 = useState(\"\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      email = _useState30[0],\n      setEmail = _useState30[1];\n\n  var _useState31 = useState(\"\"),\n      _useState32 = _slicedToArray(_useState31, 2),\n      phoneNumber = _useState32[0],\n      setPhoneNumber = _useState32[1]; // Search contacts state \n\n\n  var _useState33 = useState([]),\n      _useState34 = _slicedToArray(_useState33, 2),\n      instantSearchedContactList = _useState34[0],\n      setInstantSearchedContactList = _useState34[1];\n\n  var inputRef = useRef(); // Up/Down arrow selection state\n\n  var _useState35 = useState(true),\n      _useState36 = _slicedToArray(_useState35, 2),\n      focus = _useState36[0],\n      setFocus = _useState36[1];\n\n  var _useState37 = useState(-1),\n      _useState38 = _slicedToArray(_useState37, 2),\n      selectedContactViaArrowKeypress = _useState38[0],\n      setSelectedContactViaArrowKeypress = _useState38[1];\n\n  var _useState39 = useState(\"\"),\n      _useState40 = _slicedToArray(_useState39, 2),\n      contactSearchedTitle = _useState40[0],\n      setContactSearchedTitle = _useState40[1]; // Text Editor Form cache data\n\n\n  var _useState41 = useState(\"\"),\n      _useState42 = _slicedToArray(_useState41, 2),\n      contactCachedTitle = _useState42[0],\n      setContactCachedTitle = _useState42[1];\n\n  var _useState43 = useState(\"\"),\n      _useState44 = _slicedToArray(_useState43, 2),\n      additionalInformation = _useState44[0],\n      setAdditionalInformation = _useState44[1]; //_________________________________________________________________________________\n\n\n  useEffect(function () {\n    //::::::::::::::::::::::::::::::::Get client id from url\n    var clientData = restUrlToObject(window.location.pathname);\n    console.log(clientData);\n    var clientID = parseInt(clientData.client);\n    setclientIDfromURL(clientID);\n    return function () {};\n  }, []); // useEffect(()=>{    //::::::::::::::::::::::::::::::::Get name of client  \n  //     getClientById(clientIDfromURL).then((client)=>{\n  //       console.log(client)\n  //       updateClientName(client[\"client-name\"])\n  //     });\n  //         return ()=>{}\n  // },clientIDfromURL);\n\n  useEffect(function () {\n    //:::::::::::::::::::::::::::::::Get all contacts of the selected client per its ID\n    getClientContacts(clientIDfromURL).then(function (contactList) {\n      //   contacts:\"++id,client_id,content,title\",\n      updateContactsList(contactList); //@ If no contacts of client exist .. show the text editor to crreate a contact\n\n      checkIfContactsOfClientExist(clientIDfromURL).then(function (contactsExist) {\n        if (contactsExist) {\n          resetRenders();\n          setShowTextEditor(false);\n          setShowContacts(true); // context.setShowTextEditorVal(showTextEditor) \n        } else {\n          resetRenders();\n          setShowTextEditor(true);\n        }\n      });\n    }).finally(function () {\n      setTimeout(function () {\n        setloadingBool(false);\n      }, 500);\n    });\n    return function () {};\n  }, [clientIDfromURL, contactsQueryTrigger]);\n\n  function selectContactForContentDisplay(event, contact) {\n    setSelectedContact(contact);\n    resetRenders();\n    setShowContactContent(true);\n  } // useEffect(()=>{\n  //    resetRenders()\n  //    if(context.state.showTextEditor){\n  //      setShowTextEditor(context.state.showTextEditor) \n  //    }else{\n  //      setShowContacts(true) \n  //    }\n  // },[context.state.showTextEditor]);\n  // useEffect(()=>{\n  //    if(showTextEditor){\n  //       context.setShowTextEditorVal(showTextEditor) \n  //    }\n  // },[showTextEditor]);\n\n\n  useEffect(function () {\n    setInstantSearchedContactList(contactsList);\n    return function () {};\n  }, [contactsList]);\n  useEffect(function () {\n    function handleKeyPress(event) {\n      if (event.key === \"Enter\" && selectedContactViaArrowKeypress !== -1) {\n        setSelectedContactViaArrowKeypress(-1);\n        showContactContentViaEnterKeyPress();\n        setFocus(false);\n      }\n\n      if (event.key === \"ArrowDown\") {\n        setSelectedContactViaArrowKeypress(function (prev) {\n          return instantSearchedContactList.length - 1 === prev ? -1 : prev + 1;\n        });\n      }\n\n      if (event.key === \"ArrowUp\") {\n        setSelectedContactViaArrowKeypress(function (prev) {\n          return -1 === prev ? instantSearchedContactList.length - 1 : prev - 1;\n        });\n      }\n\n      if (event.key === \"Enter\" && showContactContent) {\n        resetRenders();\n        setShowContacts(true);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyPress);\n    return function () {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [contactsList, instantSearchedContactList, selectedContactViaArrowKeypress, focus, showContactContent]); // _____@sGross hack to get useRef to work on dynamically loaded component\n\n  var _useState45 = useState(true),\n      _useState46 = _slicedToArray(_useState45, 2),\n      delayUseRef = _useState46[0],\n      setDelayUseRef = _useState46[1];\n\n  useEffect(function () {\n    if (showContacts) {\n      // <--- Patch to fix error that appears when in other components\n      if (selectedContactViaArrowKeypress === -1 && !delayUseRef) {\n        inputRef.current.focus();\n      } else if (selectedContactViaArrowKeypress !== -1 && !delayUseRef) {\n        inputRef.current.blur();\n      } else {\n        setDelayUseRef(false);\n      }\n    }\n\n    return function () {};\n  }, [inputRef, selectedContactViaArrowKeypress, contactsQueryTrigger]); //_________________________________________________________________________\n\n  useEffect(function () {\n    var fullName = firstName + \" \" + lastName;\n    setTitle(fullName);\n  }, [firstName, lastName]); //_________________________________________________________________________\n\n  function removeContact(event, val) {\n    deleteContact(val.id).then(function (id) {\n      setContactsQueryTrigger(\"random trigger data \" + Math.random());\n    });\n  }\n\n  function selectContactForEditing(event, contact) {\n    console.log(contact);\n    resetRenders();\n    setSelectedContact(contact);\n    setTitle(contact.title);\n    setAdditionalInformation(contact[\"additional_information\"]);\n    setFirstName(contact[\"first_name\"]);\n    setLastName(contact[\"last_name\"]);\n    setEmail(contact.email);\n    setPhoneNumber(contact[\"phone_number\"]);\n    setEditingContact(true);\n    setShowTextEditor(true); //context.setShowTextEditorVal(true);\n  }\n\n  function createContactViaSearchForm(event) {\n    event.preventDefault();\n    setTitle(contactSearchedTitle);\n    resetRenders();\n    setContactCachedTitle(contactSearchedTitle);\n    setEditingContact(false);\n    setShowTextEditor(true);\n    setContactSearchedTitle(\"\");\n  } // @Form typing and submission functions\n\n\n  function clearForm() {\n    setContactCachedTitle(\"\");\n    setAdditionalInformation(\"\");\n    setTitle(\"\");\n    setFirstName(\"\");\n    setLastName(\"\");\n    setEmail(\"\");\n    setPhoneNumber(\"\");\n  }\n\n  function handleTitleChange(event) {\n    setTitle(event.target.value);\n  }\n\n  function handleFirstNameChange(event) {\n    setFirstName(event.target.value);\n  }\n\n  function handleLastNameChange(event) {\n    setLastName(event.target.value);\n  }\n\n  function handleEmailChange(event) {\n    setEmail(event.target.value);\n  }\n\n  function handlePhoneNumberChange(event) {\n    setPhoneNumber(event.target.value);\n  }\n\n  function handleContentChange(val) {\n    setAdditionalInformation(val);\n  }\n\n  function submitContact(event) {\n    event.preventDefault(); // let title = contactCachedTitle;\n    // let content = additionalInformation;\n\n    console.log(title);\n    console.log(editingContact + \" weeeee\");\n\n    if (editingContact) {\n      // get selectedWOrkflow.id, then update it via its ID\n      var id = selectedContact.id;\n      updateContact(id, clientIDfromURL, title, firstName, lastName, email, phoneNumber, additionalInformation).then(function (id) {\n        clearForm();\n        resetRenders();\n        setShowContacts(true);\n        setContactsQueryTrigger(id + Math.random()); //context.setShowTextEditorVal(false);\n\n        setEditingContact(false);\n      });\n    } else {\n      createContact(clientIDfromURL, title, firstName, lastName, email, phoneNumber, additionalInformation).then(function (id) {\n        clearForm();\n        resetRenders();\n        setShowContacts(true);\n        setContactsQueryTrigger(id + Math.random()); //context.setShowTextEditorVal(false);\n      });\n    }\n  }\n\n  function onChangeHandlerSearchContact(e) {\n    e.preventDefault();\n    setContactSearchedTitle(e.target.value);\n    setInstantSearchedContactList(instantSearchContactFilter(e.target.value.trim(), contactsList));\n  }\n\n  function onFocusHandler() {\n    setFocus(true);\n  }\n\n  function offFocusHandler() {\n    setFocus(false);\n  }\n\n  function showContactContentViaEnterKeyPress() {\n    var contact = instantSearchedContactList[selectedContactViaArrowKeypress];\n    setSelectedContact(contact);\n    resetRenders();\n    setShowContactContent(true);\n  }\n\n  useLayoutEffect(function () {\n    console.log(focus);\n  });\n\n  if (loadingBool) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 12\n      }\n    });\n  } else {\n    if (showContacts) {\n      var _React$createElement;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.bgImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.listContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.clientTitleContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"logoFontContainerDashboard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 19\n        }\n      }, \"Workflow Magic\"), /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"clientFontContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 25\n        }\n      }, decodeURI(clientNameDefault))), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.formContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          createContactViaSearchForm(e);\n          setFocus(false);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 30\n        }\n      }, /*#__PURE__*/React.createElement(TextField, (_React$createElement = {\n        onClick: function onClick() {\n          setSelectedContactViaArrowKeypress(-1);\n        },\n        className: classes.searchTextField,\n        inputRef: inputRef,\n        onFocus: onFocusHandler,\n        onBlur: offFocusHandler,\n        onChange: onChangeHandlerSearchContact,\n        autoComplete: \"off\",\n        autoFocus: focus,\n        id: \"standard-dense\",\n        label: \"CONTACT TITLE\"\n      }, _defineProperty(_React$createElement, \"className\", classes.textField), _defineProperty(_React$createElement, \"margin\", \"normal\"), _defineProperty(_React$createElement, \"variant\", \"outlined\"), _defineProperty(_React$createElement, \"placeholder\", \"Search contacts\"), _defineProperty(_React$createElement, \"type\", \"text\"), _defineProperty(_React$createElement, \"name\", \"contacts-search\"), _defineProperty(_React$createElement, \"value\", contactSearchedTitle), _defineProperty(_React$createElement, \"InputLabelProps\", {\n        shrink: true\n      }), _defineProperty(_React$createElement, \"__self\", this), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 34\n      }), _React$createElement)), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 34\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        color: \"primary\",\n        className: classes.contactButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 34\n        }\n      }, \"ADD CONTACT\"))), /*#__PURE__*/React.createElement(\"ul\", {\n        className: classes.workFlowsContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 27\n        }\n      }, instantSearchedContactList.map(function (val, index, arr) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          className: classes.editButton,\n          onClick: function onClick(event) {\n            return selectContactForEditing(event, val, index, arr);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 37\n          }\n        }, \"Edit\"), /*#__PURE__*/React.createElement(ListItem, {\n          className: selectedContactViaArrowKeypress === index && !focus ? classes.contactItemSelected : classes.contactItem,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 39\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.trashIconContainer,\n          onClick: function onClick(event) {\n            return removeContact(event, val, index, arr);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 40\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          className: classes.trashIcon,\n          edge: \"end\",\n          \"aria-label\": \"delete\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(DeleteIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 45\n          }\n        }))), /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.contactTextContent,\n          onClick: function onClick(event) {\n            return selectContactForContentDisplay(event, val, index, arr);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 41\n          }\n        }, val.title, /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 43\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.contactContent,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 43\n          }\n        }, \"email: \", val.email), /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.contactContent,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 43\n          }\n        }, \"phone: \", val.phone_number))), /*#__PURE__*/React.createElement(\"hr\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 39\n          }\n        }));\n      }))))))));\n    }\n\n    if (showContactContent) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.bgImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ContactContent, {\n        selectedContact: selectedContact,\n        onClickAction: function onClickAction() {\n          resetRenders();\n          setShowContacts(true);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 19\n        }\n      })))));\n    }\n\n    if (showTextEditor) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.bgImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(ContactTextEditor, {\n        classes: classes,\n        onSubmit: submitContact,\n        title: title,\n        onTitleChange: handleTitleChange,\n        titlePlaceholder: \"Type the name of the contact here\",\n        firstName: firstName,\n        setFirstName: setFirstName,\n        handleFirstNameChange: handleFirstNameChange,\n        lastName: lastName,\n        setLastName: setLastName,\n        handleLastNameChange: handleLastNameChange,\n        email: email,\n        handleEmailChange: handleEmailChange,\n        phoneNumber: phoneNumber,\n        handlePhoneNumberChange: handlePhoneNumberChange //____________________________________________________React Quill \n        ,\n        bodyPlaceholder: \"Type additional information about the contact in this form. You write things like \\\"is project manager\\\" or \\\"is an assistant to the CEO\\\".\",\n        onContentChange: function onContentChange(val) {\n          return handleContentChange(val);\n        },\n        contentValue: additionalInformation,\n        clientName: clientName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 19\n        }\n      })))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 15\n      }\n    }, \" all false \");\n  }\n}\n\nContacts.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nvar styles = function styles(theme) {\n  return clientContactsStyle(theme);\n};\n\nexport default withStyles(styles)(Contacts);","map":{"version":3,"sources":["/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/PageComponents/Contacts/index.js"],"names":["React","useContext","useState","useEffect","useLayoutEffect","useRef","PropTypes","withStyles","Grid","ListItem","Button","IconButton","TextField","DeleteIcon","Loader","EventNoteIcon","Box","clientContactsStyle","db","getClientById","deleteContact","createContact","getClientContacts","updateContact","checkIfContactsOfClientExist","Context","restUrlToObject","instantSearchContactFilter","ContactContent","ContactTextEditor","Contacts","props","classes","loadingBool","setloadingBool","clientNameDefault","window","location","pathname","clientName","updateClientName","clientIDfromURL","setclientIDfromURL","showTextEditor","setShowTextEditor","showContacts","setShowContacts","showContactContent","setShowContactContent","resetRenders","undefined","selectedContact","setSelectedContact","editingContact","setEditingContact","contactsList","updateContactsList","contactsQueryTrigger","setContactsQueryTrigger","title","setTitle","fullName","setFullName","firstName","setFirstName","lastName","setLastName","email","setEmail","phoneNumber","setPhoneNumber","instantSearchedContactList","setInstantSearchedContactList","inputRef","focus","setFocus","selectedContactViaArrowKeypress","setSelectedContactViaArrowKeypress","contactSearchedTitle","setContactSearchedTitle","contactCachedTitle","setContactCachedTitle","additionalInformation","setAdditionalInformation","clientData","console","log","clientID","parseInt","client","then","contactList","contactsExist","finally","setTimeout","selectContactForContentDisplay","event","contact","handleKeyPress","key","showContactContentViaEnterKeyPress","prev","length","document","addEventListener","removeEventListener","delayUseRef","setDelayUseRef","current","blur","removeContact","val","id","Math","random","selectContactForEditing","createContactViaSearchForm","preventDefault","clearForm","handleTitleChange","target","value","handleFirstNameChange","handleLastNameChange","handleEmailChange","handlePhoneNumberChange","handleContentChange","submitContact","onChangeHandlerSearchContact","e","trim","onFocusHandler","offFocusHandler","bgImage","root","listContainer","clientTitleContainer","decodeURI","formContainer","searchTextField","textField","shrink","contactButton","workFlowsContainer","map","index","arr","editButton","contactItemSelected","contactItem","trashIconContainer","trashIcon","contactTextContent","contactContent","phone_number","propTypes","object","isRequired","styles","theme"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Loader from '../Loader';\nimport EventNoteIcon from '@material-ui/icons/EventNote';\nimport Box from '@material-ui/core/Box';\nimport 'react-quill/dist/quill.snow.css'; // ES6\nimport clientContactsStyle from '../../PageComponents/Contacts/style';\nimport db,{getClientById, deleteContact, createContact, getClientContacts, updateContact,checkIfContactsOfClientExist}from \"../.././services/indexDB\";\nimport Context from \"../.././services/context\";\nimport restUrlToObject,{instantSearchContactFilter} from '../.././helper_functions';\n\n\n\nimport ContactContent from '../../PageComponents/Contacts/ContactContent';\nimport ContactTextEditor from '../../PageComponents/Contacts/ContactTextEditor';\n\n\n//\n\nfunction Contacts(props) {\n  const { classes } = props;\n\n  // @Loader\n  const [loadingBool, setloadingBool] = useState(true);\n\n  // @These state handlers get client info\n    let clientNameDefault = restUrlToObject(window.location.pathname)[\"client-name\"];\n\n  const [clientName, updateClientName] = useState(clientNameDefault );\n  const [clientIDfromURL, setclientIDfromURL] = useState(); \n \n\n\n  // @These state handlers are used to toggle between component Views: contact editing, contact text creation and content display \n  const [showTextEditor, setShowTextEditor] = useState(false);\n  const [showContacts, setShowContacts] = useState(true);\n  const [showContactContent, setShowContactContent] = useState(false);\n  function resetRenders(){\n    setShowTextEditor(false);\n    setShowContacts(false);\n    setShowContactContent(false);\n \n\n  }\n\n\n  // @These state handlers get and set contact info\n  const [selectedContact, setSelectedContact] = useState(undefined);\n  const [editingContact, setEditingContact] = useState(false);\n  const [contactsList, updateContactsList] = useState([]);\n  const [contactsQueryTrigger, setContactsQueryTrigger] = useState(false);\n\n  const [title,setTitle] = useState(\"\");\n  const [fullName, setFullName] = useState(\"\"); \n  const [firstName, setFirstName] = useState(\"\"); \n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n\n\n  // Search contacts state \n\n  const [instantSearchedContactList,setInstantSearchedContactList] = useState([]);\n  const inputRef = useRef();\n\n  // Up/Down arrow selection state\n  const [focus, setFocus] = useState(true);\n  const [selectedContactViaArrowKeypress,setSelectedContactViaArrowKeypress] = useState(-1);\n  const [contactSearchedTitle, setContactSearchedTitle] = useState(\"\");\n\n  // Text Editor Form cache data\n  const [contactCachedTitle, setContactCachedTitle] = useState(\"\");\n  const [additionalInformation, setAdditionalInformation] = useState(\"\");\n\n\n  //_________________________________________________________________________________\n\n\n  useEffect(() => {//::::::::::::::::::::::::::::::::Get client id from url\n\n      let clientData = restUrlToObject(window.location.pathname);\n      console.log(clientData)\n\n      let clientID = parseInt(clientData.client);\n\n      setclientIDfromURL(clientID);\n\n          return ()=>{}\n\n  }, []);\n\n\n\n  // useEffect(()=>{    //::::::::::::::::::::::::::::::::Get name of client  \n  //     getClientById(clientIDfromURL).then((client)=>{\n  //       console.log(client)\n  //       updateClientName(client[\"client-name\"])\n\n  //     });\n\n  //         return ()=>{}\n\n  // },clientIDfromURL);\n\n\n\n  useEffect(() => {  //:::::::::::::::::::::::::::::::Get all contacts of the selected client per its ID\n      getClientContacts(clientIDfromURL).then((contactList)=>{\n        //   contacts:\"++id,client_id,content,title\",\n\n        updateContactsList(contactList);\n\n        //@ If no contacts of client exist .. show the text editor to crreate a contact\n        checkIfContactsOfClientExist(clientIDfromURL).then((contactsExist)=>{  \n               \n           if(contactsExist){\n             resetRenders();\n             setShowTextEditor(false);\n             setShowContacts(true);\n             // context.setShowTextEditorVal(showTextEditor) \n\n           }else{\n             resetRenders();\n             setShowTextEditor(true);\n\n           }\n        })\n\n\n    }).finally(()=>{\n         setTimeout(()=>{\n             setloadingBool(false);\n         },500);\n    });\n\n        return ()=>{}\n\n    \n  }, [clientIDfromURL,contactsQueryTrigger]);\n\n  function selectContactForContentDisplay(event,contact){\n    setSelectedContact(contact)\n    resetRenders();\n    setShowContactContent(true)\n  }\n\n\n\n\n  // useEffect(()=>{\n     \n  //    resetRenders()\n  //    if(context.state.showTextEditor){\n\n  //      setShowTextEditor(context.state.showTextEditor) \n\n  //    }else{\n  //      setShowContacts(true) \n  //    }\n\n        \n  // },[context.state.showTextEditor]);\n\n  \n\n\n  // useEffect(()=>{\n  //    if(showTextEditor){\n  //       context.setShowTextEditorVal(showTextEditor) \n\n  //    }\n\n  // },[showTextEditor]);\n\n\n\n\n  useEffect(()=>{\n    setInstantSearchedContactList(contactsList)\n\n        return ()=>{}\n    \n  },[contactsList]);\n\n\n    useEffect(() => {\n        function handleKeyPress(event) {\n           \n\n           if(event.key === \"Enter\" && selectedContactViaArrowKeypress !== -1){\n      \n               setSelectedContactViaArrowKeypress(-1)\n               showContactContentViaEnterKeyPress()\n                        setFocus(false)\n\n           \n           }\n\n\n            if (event.key === \"ArrowDown\") {\n\n\n\n                setSelectedContactViaArrowKeypress((prev) => {\n\n                    return instantSearchedContactList.length - 1 === prev ? -1 : prev + 1;\n\n                });\n\n            }\n\n            if (event.key === \"ArrowUp\") {\n\n                setSelectedContactViaArrowKeypress((prev) => {\n\n                    return -1 === prev ? instantSearchedContactList.length - 1 : prev - 1;\n\n                });\n\n            }\n\n            if(event.key === \"Enter\" && showContactContent){\n                resetRenders();\n                setShowContacts(true);\n\n              \n           \n            }\n\n\n      \n\n\n\n\n        }\n\n        document.addEventListener('keydown', handleKeyPress);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n        }\n\n\n    }, [contactsList, instantSearchedContactList, selectedContactViaArrowKeypress,focus,showContactContent]);\n\n\n\n\n\n  // _____@sGross hack to get useRef to work on dynamically loaded component\n  const [delayUseRef, setDelayUseRef] = useState(true);\n\n  useEffect(()=>{\n     if(showContacts){   // <--- Patch to fix error that appears when in other components\n          \n      if(selectedContactViaArrowKeypress === -1 && !delayUseRef){\n        inputRef.current.focus()\n       }else if(selectedContactViaArrowKeypress !== -1  && !delayUseRef){\n         inputRef.current.blur()\n       }else{\n\n        setDelayUseRef(false)\n\n       }\n\n     }\n\n     return ()=>{}\n      \n \n    },[inputRef,selectedContactViaArrowKeypress,contactsQueryTrigger])\n  //_________________________________________________________________________\n\n  useEffect(()=>{\n    let fullName = firstName + \" \" + lastName;\n    setTitle(fullName)\n\n  },[firstName,lastName])\n\n\n  //_________________________________________________________________________\n\n\n\n  function removeContact(event,val){\n     deleteContact(val.id).then((id)=>{\n         setContactsQueryTrigger(\"random trigger data \" + Math.random());\n     })\n  }\n\n\n  function selectContactForEditing(event,contact){\n    console.log(contact)\n     \n    resetRenders();\n    setSelectedContact(contact);\n    setTitle(contact.title)\n    setAdditionalInformation(contact[\"additional_information\"]);\n\n\n     setFirstName(contact[\"first_name\"])\n     setLastName(contact[\"last_name\"])\n     setEmail(contact.email)\n     setPhoneNumber(contact[\"phone_number\"])\n     setEditingContact(true)\n     setShowTextEditor(true);\n      //context.setShowTextEditorVal(true);\n    \n  }\n\n  function createContactViaSearchForm(event){\n    event.preventDefault()\n    setTitle(contactSearchedTitle)\n    resetRenders();\n    setContactCachedTitle(contactSearchedTitle);\n    setEditingContact(false);\n    setShowTextEditor(true);\n    setContactSearchedTitle(\"\");\n\n  }\n\n  \n\n   // @Form typing and submission functions\n\n  function clearForm(){\n    setContactCachedTitle(\"\");\n    setAdditionalInformation(\"\");\n    setTitle(\"\");\n    setFirstName(\"\");\n    setLastName(\"\");\n    setEmail(\"\");\n    setPhoneNumber(\"\");\n  }\n  \n  function handleTitleChange(event){\n      setTitle(event.target.value)\n  }\n\n\n  function handleFirstNameChange(event){\n      setFirstName(event.target.value)\n   \n  }\n\n  function handleLastNameChange(event){\n      setLastName(event.target.value)\n\n  }\n  \n  function handleEmailChange(event){\n      setEmail(event.target.value)\n  }\n\n  function handlePhoneNumberChange(event){\n      setPhoneNumber(event.target.value)\n  }\n\n\n\n\n  function handleContentChange(val){\n      setAdditionalInformation(val)   \n  }\n\n  function submitContact(event){\n      event.preventDefault()\n      // let title = contactCachedTitle;\n      // let content = additionalInformation;\nconsole.log(title)\n\n      console.log(editingContact + \" weeeee\")\n\n      if(editingContact){\n        // get selectedWOrkflow.id, then update it via its ID\n        const id = selectedContact.id;\n        updateContact(id,clientIDfromURL,title, firstName,lastName,email,phoneNumber,additionalInformation).then((id)=>{\n           clearForm()\n           resetRenders();\n           setShowContacts(true);\n           setContactsQueryTrigger(id + Math.random());\n           //context.setShowTextEditorVal(false);\n           setEditingContact(false);\n\n        })\n\n      }else{\n\n        createContact(clientIDfromURL,title, firstName,lastName,email,phoneNumber,additionalInformation).then((id)=>{\n          clearForm()\n          resetRenders();\n          setShowContacts(true);\n          setContactsQueryTrigger(id + Math.random());\n          //context.setShowTextEditorVal(false);\n        });\n\n      }\n}\n\n\n\nfunction onChangeHandlerSearchContact(e){\n  e.preventDefault()\n\n    setContactSearchedTitle(e.target.value)\n   \n    setInstantSearchedContactList(\n        instantSearchContactFilter(e.target.value.trim(),contactsList)\n    );\n\n}\n\n\nfunction onFocusHandler(){\n    setFocus(true);\n }\n\nfunction offFocusHandler(){\n    setFocus(false);\n }\n\n\nfunction showContactContentViaEnterKeyPress(){\n\n  const contact = instantSearchedContactList[selectedContactViaArrowKeypress];\n  setSelectedContact(contact);\n  resetRenders();\n  setShowContactContent(true);\n    \n}\n\n\n\n useLayoutEffect(()=>{\n  console.log(focus);\n })\n\n\n\n  \n  if(loadingBool){\n    return <Loader/>\n  }else{\n\n      if(showContacts){\n\n        return (\n           <div className = {classes.bgImage}> \n              <div className={classes.root}>\n                <Grid container>\n                  <Grid item xs={12}>\n\n                   <Box>\n\n                      <div className={classes.listContainer}>\n\n                        <div className = {classes.clientTitleContainer}>\n                  <h1 className=\"logoFontContainerDashboard\">\n                          Workflow Magic\n                      </h1>\n                        <h1 className=\"clientFontContainer\">\n                            {decodeURI(clientNameDefault)}\n                      </h1>\n                       </div>\n                       <div className={classes.formContainer}>\n\n                             <form onSubmit = {function(e){createContactViaSearchForm(e); setFocus(false)}}>\n                     \n\n                                 <TextField \n                                    onClick = {()=>{setSelectedContactViaArrowKeypress(-1) }}\n                                    className={classes.searchTextField}\n                                    inputRef = {inputRef}\n                                    onFocus = {onFocusHandler}\n                                    onBlur = {offFocusHandler}\n                                    onChange = {onChangeHandlerSearchContact}\n                                    autoComplete=\"off\" \n                                    autoFocus = {focus}\n                                    id=\"standard-dense\" \n                                    label=\"CONTACT TITLE\" \n                                    className={classes.textField} margin=\"normal\" \n                                    variant=\"outlined\" \n                                    placeholder=\"Search contacts\" \n                                    type=\"text\" name=\"contacts-search\"\n                                    value={contactSearchedTitle}\n                                    InputLabelProps={{\n                                     shrink: true,\n                                  }} />\n\n                                 <br/>\n                                 <Button variant=\"contained\" type=\"submit\" color=\"primary\" className={classes.contactButton}>ADD CONTACT</Button>\n\n                             </form>\n\n                      </div>\n\n                          <ul className = {classes.workFlowsContainer}>\n                            {\n                              instantSearchedContactList.map((val,index,arr)=>{\n                       \n                                  return (\n\n                                    <div key={index}>  \n\n                                    <Button className = {classes.editButton}   \n                                    onClick={(event)=>selectContactForEditing(event,val,index,arr)}>Edit</Button> \n\n                                             \n                                  \n                                      <ListItem className={\n\n                                        selectedContactViaArrowKeypress === index && !focus\n                                            ? classes.contactItemSelected\n                                            : classes.contactItem\n\n                                         } \n\n                                       >\n\n                                 \n                                       <span className={classes.trashIconContainer} onClick={(event)=>removeContact(event,val,index,arr)}>\n                                            <IconButton className={classes.trashIcon} edge=\"end\" aria-label=\"delete\">\n                                            <DeleteIcon />\n                                            </IconButton>\n                                        </span>\n\n\n                                        <span className={classes.contactTextContent}  onClick = {(event)=> selectContactForContentDisplay(event,val,index,arr)}>\n                                          {val.title}\n                                          <br/>\n                                       \n\n                                          <div className = {classes.contactContent} >\n                                          email: {val.email}\n                                          </div>\n\n                                          <div className = {classes.contactContent} >\n                                          phone: {val.phone_number}\n                                          </div>\n                                        </span>\n                                 \n\n\n\n                                       {/*<span className={classes.calendarIconContainer} onClick={alert}>\n                                            <IconButton className={classes.calendarIcon} edge=\"end\" aria-label=\"delete\">\n                                            <EventNoteIcon/>\n                                            </IconButton>\n                                        </span>\n                                      */}\n\n\n                                      </ListItem>  \n                                      <hr/>\n                              \n                                    </div>\n                                  )\n                              })\n                            }\n                            </ul>\n                        </div>\n                    </Box>\n\n                      {/*<ContactsList\n                         \n                         classes={classes}\n                         clientName = {clientName}\n                         list = {instantSearchedContactList}\n                         onDeleteClick= {removeContact}\n                         onItemClick = {selectContactForContentDisplay}\n                         onEditClick={selectContactForEditing}\n                         selectedByIndex = {selectedContactViaArrowKeypress}\n                         onFocus = {onFocusHandler}\n                         onBlur= {offFocusHandler}\n                         inputRef = {inputRef}\n                         value={contactSearchedTitle}\n                         focus = {focus}\n                      /> */}\n\n                  </Grid>\n                </Grid>\n              </div>\n            </div>\n    \n        )\n      }\n\n      if(showContactContent){\n        return (\n          <div className = {classes.bgImage}> \n            <div className={classes.root}>\n              <Grid container>\n                <Grid item xs={12}>\n                  <ContactContent  selectedContact = {selectedContact} onClickAction={()=>{\n                    resetRenders();\n                    setShowContacts(true);\n                  \n                  }}/>\n                </Grid>\n              </Grid>\n            </div>\n          </div>  \n        )\n      }\n\n\n       if(showTextEditor){\n        return (\n          <div className = {classes.bgImage}> \n            <div className={classes.root}>\n              <Grid container>\n                 <Grid item xs={12}>\n                  <ContactTextEditor\n                classes = {classes}\n                onSubmit= {submitContact}\n                title= {title}\n                onTitleChange = {handleTitleChange}\n                titlePlaceholder=\"Type the name of the contact here\"\n                firstName ={firstName}\n                setFirstName = {setFirstName}\n                handleFirstNameChange = {handleFirstNameChange}\n                lastName = {lastName}\n                setLastName = {setLastName}\n                handleLastNameChange = {handleLastNameChange}\n                email = {email}\n                handleEmailChange = {handleEmailChange}\n                phoneNumber = {phoneNumber}\n                handlePhoneNumberChange = {handlePhoneNumberChange}\n\n\n\n                //____________________________________________________React Quill \n                bodyPlaceholder = 'Type additional information about the contact in this form. You write things like \"is project manager\" or \"is an assistant to the CEO\".'\n                onContentChange = {(val)=>handleContentChange(val)}\n                contentValue={additionalInformation}\n                clientName = {clientName}\n              />\n\n\n              </Grid>\n              </Grid>\n            </div>\n          </div>  \n        )\n\n      }\n\n      return (<div> all false </div>)\n\n  }\n\n}\n\n\n\n\n\n\n\nContacts.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\nconst styles = (theme) => (clientContactsStyle(theme));\nexport default withStyles(styles)(Contacts);"]},"metadata":{},"sourceType":"module"}