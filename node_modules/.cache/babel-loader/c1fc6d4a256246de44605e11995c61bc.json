{"ast":null,"code":"import _defineProperty from \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/PageComponents/Workflows/index.js\";\nimport React, { useContext, useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Loader from '../Loader';\nimport EventNoteIcon from '@material-ui/icons/EventNote';\nimport Box from '@material-ui/core/Box';\nimport 'react-quill/dist/quill.snow.css'; // ES6\n\nimport clientWorkflowsStyle from '../../PageComponents/Workflows/style';\nimport db, { getClientById, deleteWorkflow, createWorkflow, getClientWorkflows, updateWorkflow, checkIfWorkflowsOfClientExist } from \"../.././services/indexDB\";\nimport Context from \"../.././services/context\";\nimport restUrlToObject, { instantSearchWorkflowFilter } from '../.././helper_functions';\nimport WorkflowContent from '../../PageComponents/Workflows/WorkflowContent';\nimport WorkflowTextEditor from '../../PageComponents/Workflows/WorkflowTextEditor';\n\nfunction Workflows(props) {\n  var _this = this;\n\n  var classes = props.classes; // @Loader\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loadingBool = _useState2[0],\n      setloadingBool = _useState2[1]; // @These state handlers get client info\n\n\n  var clientNameDefault = restUrlToObject(window.location.pathname)[\"client-name\"];\n\n  var _useState3 = useState(clientNameDefault),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clientName = _useState4[0],\n      updateClientName = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      clientIDfromURL = _useState6[0],\n      setclientIDfromURL = _useState6[1]; // @These state handlers are used to toggle between component Views: workflow editing, workflow text creation and content display \n\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showTextEditor = _useState8[0],\n      setShowTextEditor = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showWorkflows = _useState10[0],\n      setShowWorkflows = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      showWorkflowContent = _useState12[0],\n      setShowWorkflowContent = _useState12[1];\n\n  function resetRenders() {\n    setShowTextEditor(false);\n    setShowWorkflows(false);\n    setShowWorkflowContent(false);\n  } // @These state handlers get and set workflow info\n\n\n  var _useState13 = useState({\n    title: \"\",\n    content: \"\",\n    client_id: \"\",\n    id: \"\"\n  }),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedWorkflow = _useState14[0],\n      setSelectedWorkflow = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      editingWorkflow = _useState16[0],\n      setEditingWorkflow = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      workflowsList = _useState18[0],\n      updateWorkflowsList = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      workflowsQueryTrigger = _useState20[0],\n      setWorkflowsQueryTrigger = _useState20[1]; // Search workflows state \n\n\n  var _useState21 = useState([]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      instantSearchedWorkflowList = _useState22[0],\n      setInstantSearchedWorkflowList = _useState22[1];\n\n  var inputRef = useRef(); // Up/Down arrow selection state\n\n  var _useState23 = useState(true),\n      _useState24 = _slicedToArray(_useState23, 2),\n      focus = _useState24[0],\n      setFocus = _useState24[1];\n\n  var _useState25 = useState(-1),\n      _useState26 = _slicedToArray(_useState25, 2),\n      selectedWorkflowViaArrowKeypress = _useState26[0],\n      setSelectedWorkflowViaArrowKeypress = _useState26[1];\n\n  var _useState27 = useState(\"\"),\n      _useState28 = _slicedToArray(_useState27, 2),\n      workflowSearchedTitle = _useState28[0],\n      setWorkflowSearchedTitle = _useState28[1]; // Text Editor Form cache data\n\n\n  var _useState29 = useState(\"\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      workflowCachedTitle = _useState30[0],\n      setWorkflowCachedTitle = _useState30[1];\n\n  var _useState31 = useState(\"\"),\n      _useState32 = _slicedToArray(_useState31, 2),\n      workflowCachedContent = _useState32[0],\n      setWorkflowCachedContent = _useState32[1]; //_________________________________________________________________________________\n\n\n  useEffect(function () {\n    //::::::::::::::::::::::::::::::::Get client id from url\n    var clientData = restUrlToObject(window.location.pathname);\n    console.log(clientData);\n    var clientID = parseInt(clientData.client);\n    setclientIDfromURL(clientID);\n    return function () {};\n  }, []); // useEffect(()=>{    //::::::::::::::::::::::::::::::::Get name of client  \n  //     getClientById(clientIDfromURL).then((client)=>{\n  //       console.log(client)\n  //       updateClientName(client[\"client-name\"])\n  //     });\n  //         return ()=>{}\n  // },clientIDfromURL);\n\n  useEffect(function () {\n    //:::::::::::::::::::::::::::::::Get all workflows of the selected client per its ID\n    getClientWorkflows(clientIDfromURL).then(function (workflowList) {\n      //   workflows:\"++id,client_id,content,title\",\n      updateWorkflowsList(workflowList); //@ If no workflows of client exist .. show the text editor to crreate a workflow\n\n      checkIfWorkflowsOfClientExist(clientIDfromURL).then(function (workflowsExist) {\n        if (workflowsExist) {\n          resetRenders();\n          setShowTextEditor(false);\n          setShowWorkflows(true); // context.setShowTextEditorVal(showTextEditor) \n        } else {\n          resetRenders();\n          setShowTextEditor(true);\n        }\n      });\n    }).finally(function () {\n      setTimeout(function () {\n        setloadingBool(false);\n      }, 500);\n    });\n    return function () {};\n  }, [clientIDfromURL, workflowsQueryTrigger]);\n\n  function selectWorkflowForContentDisplay(event, workflow) {\n    setSelectedWorkflow(workflow);\n    resetRenders();\n    setShowWorkflowContent(true);\n  } // useEffect(()=>{\n  //    resetRenders()\n  //    if(context.state.showTextEditor){\n  //      setShowTextEditor(context.state.showTextEditor) \n  //    }else{\n  //      setShowWorkflows(true) \n  //    }\n  // },[context.state.showTextEditor]);\n  // useEffect(()=>{\n  //    if(showTextEditor){\n  //       context.setShowTextEditorVal(showTextEditor) \n  //    }\n  // },[showTextEditor]);\n\n\n  useEffect(function () {\n    setInstantSearchedWorkflowList(workflowsList);\n    return function () {};\n  }, [workflowsList]);\n  useEffect(function () {\n    function handleKeyPress(event) {\n      if (event.key === \"Enter\" && selectedWorkflowViaArrowKeypress !== -1) {\n        setSelectedWorkflowViaArrowKeypress(-1);\n        showWorkflowContentViaEnterKeyPress();\n        setFocus(false);\n      }\n\n      if (event.key === \"ArrowDown\") {\n        setSelectedWorkflowViaArrowKeypress(function (prev) {\n          return instantSearchedWorkflowList.length - 1 === prev ? -1 : prev + 1;\n        });\n      }\n\n      if (event.key === \"ArrowUp\") {\n        setSelectedWorkflowViaArrowKeypress(function (prev) {\n          return -1 === prev ? instantSearchedWorkflowList.length - 1 : prev - 1;\n        });\n      }\n\n      if (event.key === \"Enter\" && showWorkflowContent) {\n        resetRenders();\n        setShowWorkflows(true);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyPress);\n    return function () {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [workflowsList, instantSearchedWorkflowList, selectedWorkflowViaArrowKeypress, focus, showWorkflowContent]); // _____@sGross hack to get useRef to work on dynamically loaded component\n\n  var _useState33 = useState(true),\n      _useState34 = _slicedToArray(_useState33, 2),\n      delayUseRef = _useState34[0],\n      setDelayUseRef = _useState34[1];\n\n  useEffect(function () {\n    if (showWorkflows) {\n      // <--- Patch to fix error that appears when in other components\n      if (selectedWorkflowViaArrowKeypress === -1 && !delayUseRef) {\n        inputRef.current.focus();\n      } else if (selectedWorkflowViaArrowKeypress !== -1 && !delayUseRef) {\n        inputRef.current.blur();\n      } else {\n        setDelayUseRef(false);\n      }\n    }\n\n    return function () {};\n  }, [inputRef, selectedWorkflowViaArrowKeypress, workflowsQueryTrigger]); //_________________________________________________________________________\n  //_________________________________________________________________________\n\n  function removeWorkflow(event, val) {\n    deleteWorkflow(val.id).then(function (id) {\n      setWorkflowsQueryTrigger(\"random trigger data \" + Math.random());\n    });\n  }\n\n  function selectWorkflowForEditing(event, workflow) {\n    resetRenders();\n    setSelectedWorkflow(workflow);\n    setWorkflowCachedTitle(workflow.title);\n    setWorkflowCachedContent(workflow.content);\n    setEditingWorkflow(true);\n    setShowTextEditor(true); //context.setShowTextEditorVal(true);\n  }\n\n  function createWorkflowViaSearchForm(event) {\n    event.preventDefault();\n    resetRenders();\n    setWorkflowCachedTitle(workflowSearchedTitle);\n    setEditingWorkflow(false);\n    setShowTextEditor(true);\n    setWorkflowSearchedTitle(\"\");\n  } // @Form typing and submission functions\n\n\n  function clearForm() {\n    setWorkflowCachedTitle(\"\");\n    setWorkflowCachedContent(\"\");\n  }\n\n  function handleTitleChange(event) {\n    setWorkflowCachedTitle(event.target.value);\n  }\n\n  function handleContentChange(val) {\n    setWorkflowCachedContent(val);\n  }\n\n  function submitWorkflow(event) {\n    event.preventDefault();\n    var title = workflowCachedTitle;\n    var content = workflowCachedContent;\n\n    if (editingWorkflow) {\n      // get selectedWOrkflow.id, then update it via its ID\n      var id = selectedWorkflow.id;\n      updateWorkflow(id, workflowCachedTitle, workflowCachedContent).then(function (id) {\n        clearForm();\n        resetRenders();\n        setShowWorkflows(true);\n        setWorkflowsQueryTrigger(id + Math.random()); //context.setShowTextEditorVal(false);\n\n        setEditingWorkflow(false);\n      });\n    } else {\n      createWorkflow(clientIDfromURL, title, content).then(function (id) {\n        clearForm();\n        resetRenders();\n        setShowWorkflows(true);\n        setWorkflowsQueryTrigger(id + Math.random()); //context.setShowTextEditorVal(false);\n      });\n    }\n  }\n\n  function onChangeHandlerSearchWorkflow(e) {\n    e.preventDefault();\n    setWorkflowSearchedTitle(e.target.value);\n    setInstantSearchedWorkflowList(instantSearchWorkflowFilter(e.target.value.trim(), workflowsList));\n  }\n\n  function onFocusHandler() {\n    setFocus(true);\n  }\n\n  function offFocusHandler() {\n    setFocus(false);\n  }\n\n  function showWorkflowContentViaEnterKeyPress() {\n    var workflow = instantSearchedWorkflowList[selectedWorkflowViaArrowKeypress];\n    setSelectedWorkflow(workflow);\n    resetRenders();\n    setShowWorkflowContent(true);\n  }\n\n  useLayoutEffect(function () {\n    console.log(focus);\n  });\n\n  if (loadingBool) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 12\n      }\n    });\n  } else {\n    if (showWorkflows) {\n      var _React$createElement;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.bgImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.listContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.clientTitleContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"logoFontContainerDashboard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 19\n        }\n      }, \"Workflow Magic\"), /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"clientFontContainer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 25\n        }\n      }, decodeURI(clientNameDefault))), /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.formContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(e) {\n          createWorkflowViaSearchForm(e);\n          setFocus(false);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 30\n        }\n      }, /*#__PURE__*/React.createElement(TextField, (_React$createElement = {\n        onClick: function onClick() {\n          setSelectedWorkflowViaArrowKeypress(-1);\n        },\n        className: classes.searchTextField,\n        inputRef: inputRef,\n        onFocus: onFocusHandler,\n        onBlur: offFocusHandler,\n        onChange: onChangeHandlerSearchWorkflow,\n        autoComplete: \"off\",\n        autoFocus: focus,\n        id: \"standard-dense\",\n        label: \"WORKFLOW TITLE\"\n      }, _defineProperty(_React$createElement, \"className\", classes.textField), _defineProperty(_React$createElement, \"margin\", \"normal\"), _defineProperty(_React$createElement, \"variant\", \"outlined\"), _defineProperty(_React$createElement, \"placeholder\", \"Search workflows\"), _defineProperty(_React$createElement, \"type\", \"text\"), _defineProperty(_React$createElement, \"name\", \"workflows-search\"), _defineProperty(_React$createElement, \"value\", workflowSearchedTitle), _defineProperty(_React$createElement, \"InputLabelProps\", {\n        shrink: true\n      }), _defineProperty(_React$createElement, \"__self\", this), _defineProperty(_React$createElement, \"__source\", {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 34\n      }), _React$createElement)), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 34\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        type: \"submit\",\n        color: \"primary\",\n        className: classes.workflowButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 34\n        }\n      }, \"ADD WORKFLOW\"))), /*#__PURE__*/React.createElement(\"ul\", {\n        className: classes.workFlowsContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 27\n        }\n      }, instantSearchedWorkflowList.map(function (val, index, arr) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          className: classes.editButton,\n          onClick: function onClick(event) {\n            return selectWorkflowForEditing(event, val, index, arr);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 37\n          }\n        }, \"Edit\"), /*#__PURE__*/React.createElement(ListItem, {\n          className: selectedWorkflowViaArrowKeypress === index && !focus ? classes.workflowItemSelected : classes.workflowItem,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 39\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.trashIconContainer,\n          onClick: function onClick(event) {\n            return removeWorkflow(event, val, index, arr);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 40\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          className: classes.trashIcon,\n          edge: \"end\",\n          \"aria-label\": \"delete\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(DeleteIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 45\n          }\n        }))), /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.workflowTextContent,\n          onClick: function onClick(event) {\n            return selectWorkflowForContentDisplay(event, val, index, arr);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 41\n          }\n        }, val.title), /*#__PURE__*/React.createElement(\"span\", {\n          className: classes.calendarIconContainer,\n          onClick: alert,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 40\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          className: classes.calendarIcon,\n          edge: \"end\",\n          \"aria-label\": \"delete\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(EventNoteIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 45\n          }\n        })))), /*#__PURE__*/React.createElement(\"hr\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 39\n          }\n        }));\n      }))))))));\n    }\n\n    if (showWorkflowContent) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.bgImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(WorkflowContent, {\n        title: selectedWorkflow.title,\n        content: selectedWorkflow.content,\n        onClickAction: function onClickAction() {\n          resetRenders();\n          setShowWorkflows(true);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 19\n        }\n      })))));\n    }\n\n    if (showTextEditor) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.bgImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 18\n        }\n      }, /*#__PURE__*/React.createElement(WorkflowTextEditor, {\n        classes: classes,\n        onSubmit: submitWorkflow,\n        titleValue: workflowCachedTitle,\n        onTitleChange: handleTitleChange,\n        titlePlaceholder: \"Type the name of the workflow here\" //____________________________________________________React Quill \n        ,\n        bodyPlaceholder: \"Type the name and description of a workflow in this form. A workflow is a note that helps you to remember the details of something that you need to know for the client. You write things like \\\"How to invoice\\\" and describe the steps to accomplish the task. To create a workflow for a different client you need to go back to the clients page, enter the clients name and click it.\",\n        onContentChange: function onContentChange(val) {\n          return handleContentChange(val);\n        },\n        contentValue: workflowCachedContent,\n        clientName: clientName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 19\n        }\n      })))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 15\n      }\n    }, \" all false \");\n  }\n}\n\nWorkflows.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nvar styles = function styles(theme) {\n  return clientWorkflowsStyle(theme);\n};\n\nexport default withStyles(styles)(Workflows);","map":{"version":3,"sources":["/home/wktdev/Desktop/workflowmagic_splash_page/workflowmagic/src/PageComponents/Workflows/index.js"],"names":["React","useContext","useState","useEffect","useLayoutEffect","useRef","PropTypes","withStyles","Grid","ListItem","Button","IconButton","TextField","DeleteIcon","Loader","EventNoteIcon","Box","clientWorkflowsStyle","db","getClientById","deleteWorkflow","createWorkflow","getClientWorkflows","updateWorkflow","checkIfWorkflowsOfClientExist","Context","restUrlToObject","instantSearchWorkflowFilter","WorkflowContent","WorkflowTextEditor","Workflows","props","classes","loadingBool","setloadingBool","clientNameDefault","window","location","pathname","clientName","updateClientName","clientIDfromURL","setclientIDfromURL","showTextEditor","setShowTextEditor","showWorkflows","setShowWorkflows","showWorkflowContent","setShowWorkflowContent","resetRenders","title","content","client_id","id","selectedWorkflow","setSelectedWorkflow","editingWorkflow","setEditingWorkflow","workflowsList","updateWorkflowsList","workflowsQueryTrigger","setWorkflowsQueryTrigger","instantSearchedWorkflowList","setInstantSearchedWorkflowList","inputRef","focus","setFocus","selectedWorkflowViaArrowKeypress","setSelectedWorkflowViaArrowKeypress","workflowSearchedTitle","setWorkflowSearchedTitle","workflowCachedTitle","setWorkflowCachedTitle","workflowCachedContent","setWorkflowCachedContent","clientData","console","log","clientID","parseInt","client","then","workflowList","workflowsExist","finally","setTimeout","selectWorkflowForContentDisplay","event","workflow","handleKeyPress","key","showWorkflowContentViaEnterKeyPress","prev","length","document","addEventListener","removeEventListener","delayUseRef","setDelayUseRef","current","blur","removeWorkflow","val","Math","random","selectWorkflowForEditing","createWorkflowViaSearchForm","preventDefault","clearForm","handleTitleChange","target","value","handleContentChange","submitWorkflow","onChangeHandlerSearchWorkflow","e","trim","onFocusHandler","offFocusHandler","bgImage","root","listContainer","clientTitleContainer","decodeURI","formContainer","searchTextField","textField","shrink","workflowButton","workFlowsContainer","map","index","arr","editButton","workflowItemSelected","workflowItem","trashIconContainer","trashIcon","workflowTextContent","calendarIconContainer","alert","calendarIcon","propTypes","object","isRequired","styles","theme"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect, useLayoutEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Loader from '../Loader';\nimport EventNoteIcon from '@material-ui/icons/EventNote';\nimport Box from '@material-ui/core/Box';\nimport 'react-quill/dist/quill.snow.css'; // ES6\nimport clientWorkflowsStyle from '../../PageComponents/Workflows/style';\nimport db,{getClientById, deleteWorkflow, createWorkflow, getClientWorkflows, updateWorkflow,checkIfWorkflowsOfClientExist}from \"../.././services/indexDB\";\nimport Context from \"../.././services/context\";\nimport restUrlToObject,{instantSearchWorkflowFilter} from '../.././helper_functions';\n\n\n\nimport WorkflowContent from '../../PageComponents/Workflows/WorkflowContent';\nimport WorkflowTextEditor from '../../PageComponents/Workflows/WorkflowTextEditor';\n\n\n\n\nfunction Workflows(props) {\n  const { classes } = props;\n\n  // @Loader\n  const [loadingBool, setloadingBool] = useState(true);\n\n  // @These state handlers get client info\n    let clientNameDefault = restUrlToObject(window.location.pathname)[\"client-name\"];\n\n  const [clientName, updateClientName] = useState(clientNameDefault );\n  const [clientIDfromURL, setclientIDfromURL] = useState(); \n \n\n\n  // @These state handlers are used to toggle between component Views: workflow editing, workflow text creation and content display \n  const [showTextEditor, setShowTextEditor] = useState(false);\n  const [showWorkflows, setShowWorkflows] = useState(true);\n  const [showWorkflowContent, setShowWorkflowContent] = useState(false);\n  function resetRenders(){\n    setShowTextEditor(false);\n    setShowWorkflows(false);\n    setShowWorkflowContent(false);\n \n\n  }\n\n\n  // @These state handlers get and set workflow info\n  const [selectedWorkflow, setSelectedWorkflow] = useState({title:\"\",content:\"\",client_id:\"\", id:\"\"});\n  const [editingWorkflow, setEditingWorkflow] = useState(false);\n  const [workflowsList, updateWorkflowsList] = useState([]);\n  const [workflowsQueryTrigger, setWorkflowsQueryTrigger] = useState(false);\n\n  // Search workflows state \n\n  const [instantSearchedWorkflowList,setInstantSearchedWorkflowList] = useState([]);\n  const inputRef = useRef();\n\n  // Up/Down arrow selection state\n  const [focus, setFocus] = useState(true);\n  const [selectedWorkflowViaArrowKeypress,setSelectedWorkflowViaArrowKeypress] = useState(-1);\n  const [workflowSearchedTitle, setWorkflowSearchedTitle] = useState(\"\");\n\n  // Text Editor Form cache data\n  const [workflowCachedTitle, setWorkflowCachedTitle] = useState(\"\");\n  const [workflowCachedContent, setWorkflowCachedContent] = useState(\"\");\n\n\n\n\n\n  //_________________________________________________________________________________\n\n\n  useEffect(() => {//::::::::::::::::::::::::::::::::Get client id from url\n\n      let clientData = restUrlToObject(window.location.pathname);\n      console.log(clientData)\n\n      let clientID = parseInt(clientData.client);\n\n      setclientIDfromURL(clientID);\n\n          return ()=>{}\n\n  }, []);\n\n\n\n  // useEffect(()=>{    //::::::::::::::::::::::::::::::::Get name of client  \n  //     getClientById(clientIDfromURL).then((client)=>{\n  //       console.log(client)\n  //       updateClientName(client[\"client-name\"])\n\n  //     });\n\n  //         return ()=>{}\n\n  // },clientIDfromURL);\n\n\n\n  useEffect(() => {  //:::::::::::::::::::::::::::::::Get all workflows of the selected client per its ID\n      getClientWorkflows(clientIDfromURL).then((workflowList)=>{\n        //   workflows:\"++id,client_id,content,title\",\n\n        updateWorkflowsList(workflowList);\n\n        //@ If no workflows of client exist .. show the text editor to crreate a workflow\n        checkIfWorkflowsOfClientExist(clientIDfromURL).then((workflowsExist)=>{  \n               \n           if(workflowsExist){\n             resetRenders();\n             setShowTextEditor(false);\n             setShowWorkflows(true);\n             // context.setShowTextEditorVal(showTextEditor) \n\n           }else{\n             resetRenders();\n             setShowTextEditor(true);\n\n           }\n        })\n\n\n    }).finally(()=>{\n         setTimeout(()=>{\n             setloadingBool(false);\n         },500);\n    });\n\n        return ()=>{}\n\n    \n  }, [clientIDfromURL,workflowsQueryTrigger]);\n\n  function selectWorkflowForContentDisplay(event,workflow){\n    setSelectedWorkflow(workflow)\n    resetRenders();\n    setShowWorkflowContent(true)\n  }\n\n\n\n\n  // useEffect(()=>{\n     \n  //    resetRenders()\n  //    if(context.state.showTextEditor){\n\n  //      setShowTextEditor(context.state.showTextEditor) \n\n  //    }else{\n  //      setShowWorkflows(true) \n  //    }\n\n        \n  // },[context.state.showTextEditor]);\n\n  \n\n\n  // useEffect(()=>{\n  //    if(showTextEditor){\n  //       context.setShowTextEditorVal(showTextEditor) \n\n  //    }\n\n  // },[showTextEditor]);\n\n\n\n\n  useEffect(()=>{\n    setInstantSearchedWorkflowList(workflowsList)\n\n        return ()=>{}\n    \n  },[workflowsList]);\n\n\n    useEffect(() => {\n        function handleKeyPress(event) {\n           \n\n           if(event.key === \"Enter\" && selectedWorkflowViaArrowKeypress !== -1){\n      \n               setSelectedWorkflowViaArrowKeypress(-1)\n               showWorkflowContentViaEnterKeyPress()\n                        setFocus(false)\n\n           \n           }\n\n\n            if (event.key === \"ArrowDown\") {\n\n\n\n                setSelectedWorkflowViaArrowKeypress((prev) => {\n\n                    return instantSearchedWorkflowList.length - 1 === prev ? -1 : prev + 1;\n\n                });\n\n            }\n\n            if (event.key === \"ArrowUp\") {\n\n                setSelectedWorkflowViaArrowKeypress((prev) => {\n\n                    return -1 === prev ? instantSearchedWorkflowList.length - 1 : prev - 1;\n\n                });\n\n            }\n\n            if(event.key === \"Enter\" && showWorkflowContent){\n                resetRenders();\n                setShowWorkflows(true);\n\n              \n           \n            }\n\n\n      \n\n\n\n\n        }\n\n        document.addEventListener('keydown', handleKeyPress);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n        }\n\n\n    }, [workflowsList, instantSearchedWorkflowList, selectedWorkflowViaArrowKeypress,focus,showWorkflowContent]);\n\n\n\n\n\n  // _____@sGross hack to get useRef to work on dynamically loaded component\n  const [delayUseRef, setDelayUseRef] = useState(true);\n\n  useEffect(()=>{\n     if(showWorkflows){   // <--- Patch to fix error that appears when in other components\n          \n      if(selectedWorkflowViaArrowKeypress === -1 && !delayUseRef){\n        inputRef.current.focus()\n       }else if(selectedWorkflowViaArrowKeypress !== -1  && !delayUseRef){\n         inputRef.current.blur()\n       }else{\n\n        setDelayUseRef(false)\n\n       }\n\n     }\n\n     return ()=>{}\n      \n \n    },[inputRef,selectedWorkflowViaArrowKeypress,workflowsQueryTrigger])\n  //_________________________________________________________________________\n\n\n\n\n  //_________________________________________________________________________\n\n\n\n  function removeWorkflow(event,val){\n     deleteWorkflow(val.id).then((id)=>{\n         setWorkflowsQueryTrigger(\"random trigger data \" + Math.random());\n     })\n  }\n\n\n  function selectWorkflowForEditing(event,workflow){\n     \n    resetRenders();\n    setSelectedWorkflow(workflow);\n    setWorkflowCachedTitle(workflow.title)\n    setWorkflowCachedContent(workflow.content);\n    setEditingWorkflow(true)\n    setShowTextEditor(true);\n    //context.setShowTextEditorVal(true);\n    \n  }\n\n  function createWorkflowViaSearchForm(event){\n    event.preventDefault()\n    \n    resetRenders();\n    setWorkflowCachedTitle(workflowSearchedTitle);\n    setEditingWorkflow(false);\n    setShowTextEditor(true);\n    setWorkflowSearchedTitle(\"\");\n\n  }\n\n  \n\n   // @Form typing and submission functions\n\n  function clearForm(){\n    setWorkflowCachedTitle(\"\");\n    setWorkflowCachedContent(\"\");\n  }\n  \n  function handleTitleChange(event){\n      setWorkflowCachedTitle(event.target.value)\n  }\n\n  function handleContentChange(val){\n      setWorkflowCachedContent(val)   \n  }\n\n  function submitWorkflow(event){\n      event.preventDefault()\n      let title = workflowCachedTitle;\n      let content = workflowCachedContent;\n\n      if(editingWorkflow){\n        // get selectedWOrkflow.id, then update it via its ID\n        const id = selectedWorkflow.id;\n        updateWorkflow(id,workflowCachedTitle, workflowCachedContent).then((id)=>{\n           clearForm()\n           resetRenders();\n           setShowWorkflows(true);\n           setWorkflowsQueryTrigger(id + Math.random());\n           //context.setShowTextEditorVal(false);\n           setEditingWorkflow(false);\n\n\n\n        })\n\n      }else{\n\n        createWorkflow(clientIDfromURL,title, content).then((id)=>{\n          clearForm()\n          resetRenders();\n          setShowWorkflows(true);\n          setWorkflowsQueryTrigger(id + Math.random());\n          //context.setShowTextEditorVal(false);\n\n\n        });\n\n      }\n}\n\n\n\nfunction onChangeHandlerSearchWorkflow(e){\n  e.preventDefault()\n\n    setWorkflowSearchedTitle(e.target.value)\n   \n    setInstantSearchedWorkflowList(\n        instantSearchWorkflowFilter(e.target.value.trim(),workflowsList)\n    );\n\n}\n\n\nfunction onFocusHandler(){\n    setFocus(true);\n }\n\nfunction offFocusHandler(){\n    setFocus(false);\n }\n\n\nfunction showWorkflowContentViaEnterKeyPress(){\n\n  const workflow = instantSearchedWorkflowList[selectedWorkflowViaArrowKeypress];\n  setSelectedWorkflow(workflow);\n  resetRenders();\n  setShowWorkflowContent(true);\n    \n}\n\n\n\n useLayoutEffect(()=>{\n  console.log(focus);\n })\n\n\n\n  \n  if(loadingBool){\n    return <Loader/>\n  }else{\n\n      if(showWorkflows){\n\n        return (\n           <div className = {classes.bgImage}> \n              <div className={classes.root}>\n                <Grid container>\n                  <Grid item xs={12}>\n\n                   <Box>\n\n                      <div className={classes.listContainer}>\n\n                        <div className = {classes.clientTitleContainer}>\n                  <h1 className=\"logoFontContainerDashboard\">\n                          Workflow Magic\n                      </h1>\n                        <h1 className=\"clientFontContainer\">\n                            {decodeURI(clientNameDefault)}\n                      </h1>\n                       </div>\n                       <div className={classes.formContainer}>\n\n                             <form onSubmit = {function(e){createWorkflowViaSearchForm(e); setFocus(false)}}>\n                     \n\n                                 <TextField \n                                    onClick = {()=>{setSelectedWorkflowViaArrowKeypress(-1) }}\n                                    className={classes.searchTextField}\n                                    inputRef = {inputRef}\n                                    onFocus = {onFocusHandler}\n                                    onBlur = {offFocusHandler}\n                                    onChange = {onChangeHandlerSearchWorkflow}\n                                    autoComplete=\"off\" \n                                    autoFocus = {focus}\n                                    id=\"standard-dense\" \n                                    label=\"WORKFLOW TITLE\" \n                                    className={classes.textField} margin=\"normal\" \n                                    variant=\"outlined\" \n                                    placeholder=\"Search workflows\" \n                                    type=\"text\" name=\"workflows-search\"\n                                    value={workflowSearchedTitle}\n                                    InputLabelProps={{\n                                     shrink: true,\n                                  }} />\n\n                                 <br/>\n                                 <Button variant=\"contained\" type=\"submit\" color=\"primary\" className={classes.workflowButton}>ADD WORKFLOW</Button>\n\n                             </form>\n\n                      </div>\n\n                          <ul className = {classes.workFlowsContainer}>\n                            {\n                              instantSearchedWorkflowList.map((val,index,arr)=>{\n                       \n                                  return (\n\n                                    <div key={index}>  \n\n                                    <Button className = {classes.editButton}   \n                                    onClick={(event)=>selectWorkflowForEditing(event,val,index,arr)}>Edit</Button> \n\n                                             \n                                  \n                                      <ListItem className={\n\n                                        selectedWorkflowViaArrowKeypress === index && !focus\n                                            ? classes.workflowItemSelected\n                                            : classes.workflowItem\n\n                                         } \n\n                                       >\n\n                                 \n                                       <span className={classes.trashIconContainer} onClick={(event)=>removeWorkflow(event,val,index,arr)}>\n                                            <IconButton className={classes.trashIcon} edge=\"end\" aria-label=\"delete\">\n                                            <DeleteIcon />\n                                            </IconButton>\n                                        </span>\n\n\n                                        <span className={classes.workflowTextContent}  onClick = {(event)=> selectWorkflowForContentDisplay(event,val,index,arr)}>\n                                          {val.title}\n                                        </span>\n                                 \n\n\n\n                                       <span className={classes.calendarIconContainer} onClick={alert}>\n                                            <IconButton className={classes.calendarIcon} edge=\"end\" aria-label=\"delete\">\n                                            <EventNoteIcon/>\n                                            </IconButton>\n                                        </span>\n\n\n                                      </ListItem>  \n                                      <hr/>\n                              \n                                    </div>\n                                  )\n                              })\n                            }\n                            </ul>\n                        </div>\n                    </Box>\n\n                      {/*<WorkflowsList\n                         \n                         classes={classes}\n                         clientName = {clientName}\n                         list = {instantSearchedWorkflowList}\n                         onDeleteClick= {removeWorkflow}\n                         onItemClick = {selectWorkflowForContentDisplay}\n                         onEditClick={selectWorkflowForEditing}\n                         selectedByIndex = {selectedWorkflowViaArrowKeypress}\n                         onFocus = {onFocusHandler}\n                         onBlur= {offFocusHandler}\n                         inputRef = {inputRef}\n                         value={workflowSearchedTitle}\n                         focus = {focus}\n                      /> */}\n\n                  </Grid>\n                </Grid>\n              </div>\n            </div>\n    \n        )\n      }\n\n      if(showWorkflowContent){\n        return (\n          <div className = {classes.bgImage}> \n            <div className={classes.root}>\n              <Grid container>\n                <Grid item xs={12}>\n                  <WorkflowContent  title={selectedWorkflow.title} content={selectedWorkflow.content} onClickAction={()=>{\n                    resetRenders();\n                    setShowWorkflows(true);\n                  \n                  }}/>\n                </Grid>\n              </Grid>\n            </div>\n          </div>  \n        )\n      }\n\n\n       if(showTextEditor){\n        return (\n          <div className = {classes.bgImage}> \n            <div className={classes.root}>\n              <Grid container>\n                 <Grid item xs={12}>\n                  <WorkflowTextEditor\n                classes = {classes}\n                onSubmit= {submitWorkflow}\n                titleValue = {workflowCachedTitle}\n                onTitleChange = {handleTitleChange}\n                titlePlaceholder=\"Type the name of the workflow here\"\n                //____________________________________________________React Quill \n                bodyPlaceholder = 'Type the name and description of a workflow in this form. A workflow is a note that helps you to remember the details of something that you need to know for the client. You write things like \"How to invoice\" and describe the steps to accomplish the task. To create a workflow for a different client you need to go back to the clients page, enter the clients name and click it.'\n                onContentChange = {(val)=>handleContentChange(val)}\n                contentValue={workflowCachedContent}\n                clientName = {clientName}\n              />\n\n\n              </Grid>\n              </Grid>\n            </div>\n          </div>  \n        )\n\n      }\n\n      return (<div> all false </div>)\n\n  }\n\n}\n\n\n\n\n\n\n\nWorkflows.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\nconst styles = (theme) => (clientWorkflowsStyle(theme));\nexport default withStyles(styles)(Workflows);"]},"metadata":{},"sourceType":"module"}